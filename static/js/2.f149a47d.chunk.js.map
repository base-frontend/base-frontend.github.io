{"version":3,"sources":["hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/PageHeader/PageHeader.tsx","components/IconButton/IconButton.tsx","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","hooks/useHandleTransactionReceipt.ts","components/UnlockWallet/UnlockWallet.tsx","components/CardIcon/CardIcon.tsx","hooks/useApprove.ts","hooks/useTombStats.ts","components/Spacer/Spacer.tsx","components/Value/Value.tsx","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","hooks/useBanks.ts"],"names":["useEarnings","poolName","earnTokenName","poolId","useState","BigNumber","from","balance","setBalance","tombFinance","useTombFinance","isUnlocked","fetchBalance","useCallback","a","earnedFromBank","myAccount","useEffect","catch","err","console","error","stack","refreshBalance","setInterval","config","refreshInterval","clearInterval","useHarvest","bank","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvest","contract","StyledCardHeader","styled","div","StyledCardActions","props","theme","spacing","StyledCardContentInner","Harvest","earnings","tombStats","useTombStats","tShareStats","useShareStats","tokenName","tokenStats","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","style","boxShadow","CardContent","CardIcon","TokenSymbol","symbol","earnToken","Value","value","Label","text","Button","onClick","disabled","eq","color","variant","useStake","onStake","amount","amountBn","parseUnits","depositToken","decimal","stake","depositTokenName","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","max","decimals","onConfirm","onDismiss","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","StyledActionSpacer","Stake","useApprove","address","approveStatus","approve","tokenBalance","useContext","ThemeContext","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","useZap","onZap","useModal","isNaN","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","size","ApprovalState","APPROVED","closedForStaking","PENDING","UNKNOWN","marginTop","IconButton","useBank","contractName","banks","BanksContext","find","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","height","breakpoints","up","BankNotFound","Center","PageHeader","icon","title","subtitle","StyledBank","StyledCardsWrapper","primary","main","StyledCardWrapper","Bank","window","scrollTo","classes","bankId","useParams","account","useWallet","statsOnPool","name","Box","Grid","container","justify","marginBottom","item","xs","md","lg","className","textAlign","Typography","yearlyAPR","dailyAPR","TVL","mt","Spacer","UnlockWallet","StyledIcon","Icon","children","AddIcon","themeColor","viewBox","width","d","fill","grey","RemoveIcon","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","StyledButton","button","undefined","StyledLink","Link","to","React","ref","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","message","includes","toLowerCase","slice","position","top","left","transform","AccountButton","StyledCardIcon","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","NOT_APPROVED","response","approval","tokenAddress","stat","setStat","fastRefresh","useRefresh","getTombStat","fetchTombPrice","StyledSpacer","s","StyledValue","zappingToken","zapIn","slowRefresh","getShareStat","fetchSharePrice","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","useBanks"],"mappings":"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","file":"static/js/2.f149a47d.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, earnTokenName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useEarnings;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { Bank } from '../tomb-finance';\n\nconst useHarvest = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleReward = useCallback(() => {\n    handleTransactionReceipt(\n      tombFinance.harvest(bank.contract, bank.poolId),\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\n    );\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onReward: handleReward };\n};\n\nexport default useHarvest;\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useEarnings from '../../../hooks/useEarnings';\nimport useHarvest from '../../../hooks/useHarvest';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\nimport useTombStats from '../../../hooks/useTombStats';\nimport useShareStats from '../../../hooks/usetShareStats';\n\ninterface HarvestProps {\n  bank: Bank;\n}\n\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\n  const { onReward } = useHarvest(bank);\n  const tombStats = useTombStats();\n  const tShareStats = useShareStats();\n\n  const tokenName = bank.earnTokenName === 'SHARE' ? 'SHARE' : 'BETH';\n  const tokenStats = bank.earnTokenName === 'SHARE' ? tShareStats : tombStats;\n  const tokenPriceInDollars = useMemo(\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\n    [tokenStats],\n  );\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\n  return (\n    <Card style={{ boxShadow: 'none !important'}}>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.earnToken.symbol} />\n            </CardIcon>\n            <Value value={getDisplayBalance(earnings)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${tokenName} Earned`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\n              Claim\n            </Button>\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[6]}px;\n  width: 100%;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Harvest;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useStake = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleStake = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onStake: handleStake };\n};\n\nexport default useStake;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { BigNumber } from 'ethers';\nimport useTombFinance from './useTombFinance';\nimport { ContractName } from '../tomb-finance';\nimport config from '../config';\n\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\n    setBalance(balance);\n  }, [poolName, poolId, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshBalance);\n    }\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\n\n  return balance;\n};\n\nexport default useStakedBalance;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\nimport { parseUnits } from 'ethers/lib/utils';\n\nconst useWithdraw = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleWithdraw = useCallback(\n    (amount: string) => {\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\n      handleTransactionReceipt(\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract} `,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onWithdraw: handleWithdraw };\n};\n\nexport default useWithdraw;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface DepositModalProps extends ModalProps {\n  max: BigNumber;\n  decimals: number;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Deposit ${tokenName}`} />\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default DepositModal;\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\n\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { BigNumber } from 'ethers';\n\ninterface WithdrawModalProps extends ModalProps {\n  max: BigNumber;\n  onConfirm: (amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\n  const [val, setVal] = useState('');\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals, false);\n  }, [max, decimals]);\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value);\n    },\n    [setVal],\n  );\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  return (\n    <Modal>\n      <ModalTitle text={`Withdraw ${tokenName}`} />\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\n          Confirm\n        </Button>\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\n\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\n      </ModalActions>\n    </Modal>\n  );\n};\n\nexport default WithdrawModal;\n","import React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components';\n\n// import Button from '../../../components/Button';\nimport { Button, Card, CardContent } from '@material-ui/core';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport { ThemeContext } from 'styled-components';\n\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport { Bank } from '../../../tomb-finance';\n\ninterface StakeProps {\n  bank: Bank;\n}\n\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n\n  const { color: themeColor } = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n  const earnedInDollars = (\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\n  ).toFixed(2);\n  const { onStake } = useStake(bank);\n  const { onZap } = useZap(bank);\n  const { onWithdraw } = useWithdraw(bank);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onStake(amount);\n        onDismissDeposit();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  // const [onPresentZap, onDissmissZap] = useModal(\n  //   <ZapModal\n  //     decimals={bank.depositToken.decimal}\n  //     onConfirm={(zappingToken, tokenName, amount) => {\n  //       if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n  //       onZap(zappingToken, tokenName, amount);\n  //       onDissmissZap();\n  //     }}\n  //     tokenName={bank.depositTokenName}\n  //   />,\n  // );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  return (\n    <Card style={{ boxShadow: 'none !important'}}>\n      <CardContent>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <CardIcon>\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\n            </CardIcon>\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\n            <Label text={`≈ $${earnedInDollars}`} />\n            <Label text={`${bank.depositTokenName} Staked`} />\n          </StyledCardHeader>\n          <StyledCardActions>\n            {approveStatus !== ApprovalState.APPROVED ? (\n              <Button\n                disabled={\n                  bank.closedForStaking ||\n                  approveStatus === ApprovalState.PENDING ||\n                  approveStatus === ApprovalState.UNKNOWN\n                }\n                onClick={approve}\n                color=\"primary\"\n                variant=\"contained\"\n                style={{ marginTop: '20px' }}\n              >\n                {`Approve ${bank.depositTokenName}`}\n              </Button>\n            ) : (\n              <>\n                <IconButton onClick={onPresentWithdraw}>\n                  <RemoveIcon />\n                </IconButton>\n                <StyledActionSpacer />\n                {/* <IconButton\n                  disabled={bank.closedForStaking || bank.depositTokenName === 'TOMB-FTM-LP'}\n                  onClick={() => (bank.closedForStaking ? null : onPresentZap())}\n                >\n                  <FlashOnIcon style={{ color: themeColor.grey[400] }} />\n                </IconButton> */}\n                <StyledActionSpacer />\n                <IconButton\n                  disabled={bank.closedForStaking}\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\n                >\n                  <AddIcon />\n                </IconButton>\n              </>\n            )}\n          </StyledCardActions>\n        </StyledCardContentInner>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n","import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\nimport { Bank, ContractName } from '../tomb-finance';\n\nconst useBank = (contractName: ContractName): Bank => {\n  const { banks } = useContext(BanksContext);\n  if (contractName === \"BethEthGenesisPool\") {\n    return banks.find(bank => bank.contract === \"TombGenesisRewardPool\" && bank.depositTokenName === \"BETH-ETH LP\")\n  } else if (contractName === \"ShareEthGenesisPool\") {\n    return banks.find(bank => bank.contract === \"TombGenesisRewardPool\" && bank.depositTokenName === \"SHARE-ETH LP\")\n  } else if (contractName === \"EthGenesisPool\") {\n    return banks.find(bank => bank.contract === \"TombGenesisRewardPool\" && bank.depositTokenName === \"WETH\")\n  } else if (contractName === \"BaldGenesisPool\") {\n    return banks.find(bank => bank.contract === \"TombGenesisRewardPool\" && bank.depositTokenName === \"BALD\")\n  } else if (contractName === \"BethEthRewardPool\") {\n    return banks.find(bank => bank.contract === \"ShareRewardPool\" && bank.depositTokenName === \"BETH-ETH LP\")\n  } else if (contractName === \"ShareEthRewardPool\") {\n    return banks.find(bank => bank.contract === \"ShareRewardPool\" && bank.depositTokenName === \"SHARE-ETH LP\")\n  } else if (contractName === \"EthRewardPool\") {\n    return banks.find(bank => bank.contract === \"ShareRewardPool\" && bank.depositTokenName === \"WETH\")\n  }\n  return banks.find((bank) => bank.contract === contractName);\n};\n\nexport default useBank;\n","import { useCallback, useState, useEffect } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport { PoolStats } from '../tomb-finance/types';\nimport config from '../config';\n\nconst useStatsForPool = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\n\n  const fetchAPRsForPool = useCallback(async () => {\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\n  }, [tombFinance, bank]);\n\n  useEffect(() => {\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch TBOND price: ${err.stack}`));\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\n    return () => clearInterval(refreshInterval);\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\n\n  return poolAPRs;\n};\n\nexport default useStatsForPool;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useRedeem = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleRedeem = useCallback(() => {\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\n  }, [bank, tombFinance, handleTransactionReceipt]);\n\n  return { onRedeem: handleRedeem };\n};\n\nexport default useRedeem;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\n\nimport PageHeader from '../../components/PageHeader';\nimport Spacer from '../../components/Spacer';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport Harvest from './components/Harvest';\nimport Stake from './components/Stake';\nimport useBank from '../../hooks/useBank';\nimport useStatsForPool from '../../hooks/useStatsForPool';\nimport useRedeem from '../../hooks/useRedeem';\nimport { Bank as BankEntity } from '../../tomb-finance';\nimport useTombFinance from '../../hooks/useTombFinance';\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    height: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90px',\n    },\n  },\n}));\n\nconst Bank: React.FC = () => {\n  useEffect(() => window.scrollTo(0, 0));\n  const classes = useStyles();\n  const { bankId } = useParams();\n  const bank = useBank(bankId);\n\n  const { account } = useWallet();\n  const { onRedeem } = useRedeem(bank);\n  const statsOnPool = useStatsForPool(bank);\n  return account && bank ? (\n    <>\n      <PageHeader\n        icon=\"🏦\"\n        subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName}`}\n        title={bank?.name}\n      />\n      <Box>\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center', boxShadow: 'none !important' }}>\n                <Typography>APR</Typography>\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>Daily APR</Typography>\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\n            <Card className={classes.gridItem}>\n              <CardContent style={{ textAlign: 'center' }}>\n                <Typography>TVL</Typography>\n                <Typography>${statsOnPool?.TVL}</Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt={5}>\n        <StyledBank>\n          <StyledCardsWrapper>\n            <StyledCardWrapper>\n              <Harvest bank={bank} />\n            </StyledCardWrapper>\n            <Spacer />\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\n          </StyledCardsWrapper>\n          <Spacer size=\"lg\" />\n          {/* {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />} */}\n          <Spacer size=\"lg\" />\n          <div>\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\n              Claim & Withdraw\n            </Button>\n          </div>\n          <Spacer size=\"lg\" />\n        </StyledBank>\n      </Box>\n    </>\n  ) : !bank ? (\n    <BankNotFound />\n  ) : (\n    <UnlockWallet />\n  );\n};\n\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\n  const tombFinance = useTombFinance();\n  const tombAddr = tombFinance.TOMB.address;\n  const tshareAddr = tombFinance.TSHARE.address;\n\n  let pairName: string;\n  let uniswapUrl: string;\n  if (bank.depositTokenName.includes('3OMB')) {\n    pairName = '3OMB-WFTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tombAddr;\n  } else {\n    pairName = '3SHARE-WFTM pair';\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\n  }\n  return (\n    <Card>\n      <CardContent>\n        <StyledLink href={uniswapUrl} target=\"_blank\">\n          {`👻 Provide liquidity for ${pairName} now on SpookySwap 👻`}\n        </StyledLink>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst BankNotFound = () => {\n  return (\n    <Center>\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\n    </Center>\n  );\n};\n\nconst StyledBank = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst StyledLink = styled.a`\n  font-weight: 700;\n  text-decoration: none;\n  color: ${(props) => props.theme.color.primary.main};\n`;\n\nconst StyledCardsWrapper = styled.div`\n  display: flex;\n  width: 600px;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst Center = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default Bank;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IconProps {\n  color?: string;\n  children?: string;\n}\n\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\n\nconst StyledIcon = styled.div``;\n\nexport default Icon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[400]} />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default AddIcon;\n","import React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nimport Icon, { IconProps } from '../Icon';\n\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\n  const { color: themeColor } = useContext(ThemeContext);\n  return (\n    <Icon>\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[400]} width=\"18px\" height=\"18px\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <path d=\"M19 13H5v-2h14v2z\" />\n      </svg>\n    </Icon>\n  );\n};\n\nexport default RemoveIcon;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface PageHeaderProps {\n  icon: React.ReactNode;\n  subtitle?: string;\n  title?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\n  return (\n    <StyledPageHeader>\n      {/* <StyledIcon>{icon}</StyledIcon> */}\n      <StyledTitle>{title}</StyledTitle>\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\n    </StyledPageHeader>\n  );\n};\n\nconst StyledPageHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\n  padding-top: ${(props) => props.theme.spacing[6]}px;\n  max-width: 610px;\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst StyledTitle = styled.h1`\n  color: ${(props) => props.theme.color.grey[100]};\n  font-size: 36px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n`;\n\nconst StyledSubtitle = styled.h3`\n  color: ${(props) => props.theme.color.grey[400]};\n  font-size: 18px;\n  font-weight: 400;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n`;\n\nexport default PageHeader;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\ninterface IconButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onClick?: () => void;\n  to?: string;\n}\n\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick}>\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\n    </StyledButton>\n  );\n};\n\ninterface StyledButtonProps {\n  disabled?: boolean;\n}\n/*\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\n */\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  align-items: center;\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\n  background-color: ${(props) => (!props.disabled ? '#406ff5' : props.theme.color.grey[900])};\n  border: 0;\n  border-radius: 10px !important;\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\n  cursor: pointer;\n  display: flex;\n  font-weight: 700;\n  height: 56px;\n  justify-content: center;\n  letter-spacing: 1px;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\n  text-transform: uppercase;\n  width: 56px;\n  &:hover {\n    // background-color: ${(props) => props.theme.color.grey[800]};\n    background-color: #7c9cf6;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  align-items: center;\n  color: inherit;\n  display: flex;\n  flex: 1;\n  height: 56px;\n  justify-content: center;\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\n  text-decoration: none;\n`;\n\nexport default IconButton;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport AccountButton from '../Nav/AccountButton';\n\nconst UnlockWallet = () => {\n  return (\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n      <AccountButton />\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\n    </Box>\n  );\n};\n\nexport default UnlockWallet;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\n  background-color: none;\n  font-size: 36px;\n  height: 95px;\n  width: 95px;\n  border-radius: 40px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  box-shadow: none !important;\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\n  const pendingApproval = useHasPendingApproval(token.address, spender);\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(spender, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: spender,\n      },\n    });\n  }, [approvalState, token, spender, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApprove;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import React, { useContext } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext);\n\n  let s: number;\n  switch (size) {\n    case 'lg':\n      s = spacing[6];\n      break;\n    case 'sm':\n      s = spacing[2];\n      break;\n    case 'md':\n    default:\n      s = spacing[4];\n  }\n\n  return <StyledSpacer size={s} />;\n};\n\ninterface StyledSpacerProps {\n  size: number;\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`;\n\nexport default Spacer;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\ninterface ValueProps {\n  value: string;\n}\n\nconst Value: React.FC<ValueProps> = ({ value }) => {\n  return <StyledValue>{value}</StyledValue>;\n};\n\nconst StyledValue = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n`;\n\nexport default Value;\n","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport useTombFinance from './useTombFinance';\nimport config from '../config';\nimport ERC20 from '../tomb-finance/ERC20';\n\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\n    setStakedTokenPriceInDollars(balance);\n  }, [stakedToken, stakedTokenName, tombFinance]);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      fetchBalance().catch((err) => console.error(err.stack));\n\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\n    }\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\n\n  return stakedTokenPriceInDollars;\n};\n\nexport default useStakedTokenPriceInDollars;\n","import { useContext } from 'react';\nimport { Context as BanksContext } from '../contexts/Banks';\n\nconst useBanks = () => {\n  const { banks } = useContext(BanksContext);\n  return [banks];\n};\n\nexport default useBanks;\n"],"sourceRoot":""}