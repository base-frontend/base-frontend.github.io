{"version":3,"sources":["assets/img/home.png","hooks/useApproveZapper.ts","hooks/useLpStats.ts","hooks/useTotalValueLocked.ts","views/Bank/components/ZapModal.tsx","views/Home/Home.js","hooks/useHandleTransactionReceipt.ts","components/CardIcon/CardIcon.tsx","hooks/useTombStats.ts","hooks/useTotalTreasuryBalance.js","hooks/useZap.ts","hooks/useBondStats.ts","hooks/usetShareStats.ts"],"names":["module","exports","ApprovalState","useLpStats","lpTicker","useState","stat","setStat","slowRefresh","useRefresh","tombFinance","useTombFinance","useEffect","a","getLPStat","console","error","fetchLpPrice","useTotalValueLocked","totalValueLocked","setTotalValueLocked","getTotalValueLocked","fetchTVL","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","BigNumber","from","useApproveZapper","zappingToken","token","FTM_TICKER","FTM","TOMB_TICKER","TOMB","TSHARE_TICKER","TSHARE","pendingApproval","useHasPendingApproval","address","ZAPPER_ROUTER_ADDR","currentAllowance","useAllowance","approvalState","useMemo","APPROVED","lt","PENDING","NOT_APPROVED","UNKNOWN","addTransaction","useTransactionAdder","approve","useCallback","response","summary","symbol","approval","tokenAddress","spender","StyledActionSpacer","styled","div","props","theme","spacing","StyledDescriptionText","color","grey","StyledMenuItem","withStyles","root","backgroundColor","selected","MenuItem","ZapModal","onConfirm","onDismiss","tokenName","decimals","balance","useWallet","ftmBalance","Number","toFixed","toString","tombBalance","useTokenBalance","tshareBalance","val","setVal","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","handleChange","e","currentTarget","value","n","isNaN","parseFloat","isFinite","estimateZapIn","String","estimateZap","handleSelectMax","Modal","ModalTitle","text","Typography","variant","align","target","rel","href","InputLabel","style","id","Select","onChange","event","getDisplayBalance","labelId","TokenInput","onSelectMax","max","Label","ModalActions","Button","onClick","Alert","severity","BackgroundImage","createGlobalStyle","useStyles","makeStyles","button","breakpoints","down","marginTop","Home","tomb","tShare","TVL","tombStats","useTombStats","tShareStats","usetShareStats","tBondStats","useBondStats","useETHPrice","ftmPrice","price","ftmPriceChange","priceChange","totalTVL","useTotalTreasuryBalance","useSHAREPrice","SHAREPriceETH","SHAREPrice","SHAREMarketCap","SHARELiquidity","SHARESupply","tombProd","tShareProd","tombPriceInDollars","priceInDollars","tombPriceInFTM","tokenInFtm","tombCirculatingSupply","circulatingSupply","tombTotalSupply","totalSupply","tombLpZap","useZap","depositTokenName","tshareLpZap","StyledLink","useModal","amount","onZap","onDissmissTombZap","onDissmissTshareZap","Page","Grid","container","item","xs","alignItems","justify","Card","elevation","border","CardContent","display","margin","flexDirection","justifyContent","marginBottom","fontSize","marginBotton","end","separator","prefix","fullWidth","flex","padding","sm","boxShadow","position","Box","mt","CardIcon","TokenSymbol","alignContent","useHandleTransactionReceipt","addPopup","useAddPopup","promise","then","tx","catch","err","message","includes","toLowerCase","slice","stack","StyledCardIcon","children","fastRefresh","getTombStat","fetchTombPrice","web3","Web3","ERC20ABI","treasuryAddress","ThreeShares","eth","Contract","WFTM","setBalance","balance_2shares_wftm","setBalance_2shares_wftm","balance_3omb_wftm","setBalance_3omb_wftm","balance_3shares_wftm","setBalance_3shares_wftm","balance_3omb","setBalance_3omb","balance_3shares","setBalance_3shares","balance_2shares","setBalance_2shares","getBalance","interval","setInterval","clearInterval","axios","data","utils","methods","balanceOf","call","threeSharesBalance","fromWei","value3shares","current_price","log","getLPPrice","LP_2shares_wftm","LP_3omb_wftm","LP_3shares_wftm","get3ombBalance","get3sharesBalance","get2sharesBalance","token3omb","usdValue","token3shares","token2shares","LPAddress","LPtoken","wftmValue","getTokenPrice","tokenValue","OneTokenValue","total","bank","handleTransactionReceipt","zapIn","getBondStat","fetchBondPrice","useShareStats","getShareStat","fetchSharePrice"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,mICW/BC,E,mKCcGC,EApBI,SAACC,GAClB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACQC,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIN,EAFJ,SAEkBG,EAAYI,UAAUV,GAFxC,kFAKIW,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,KACC,CAACV,EAASG,EAAaF,EAAaJ,IAEhCE,G,oCCEMY,EApBa,WAC1B,MAAgDb,mBAAiB,GAAjE,mBAAOc,EAAP,KAAyBC,EAAzB,KACQZ,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIO,EAFJ,SAE8BV,EAAYW,sBAF1C,kFAKIN,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdM,KACC,CAACF,EAAqBV,EAAaF,IAE/BW,G,gQFbHI,GAAiBC,IAAOC,UAAUC,WAClCC,GAAsBC,IAAUC,KAAK,8B,SAE/B3B,O,qBAAAA,I,+BAAAA,I,qBAAAA,I,wBAAAA,M,KAoDG4B,I,YAAAA,GA5Cf,SAA0BC,GACxB,IACIC,EADEtB,EAAcC,cAEhBoB,IAAiBE,IAAYD,EAAQtB,EAAYwB,IAC5CH,IAAiBI,IAAaH,EAAQtB,EAAY0B,KAClDL,IAAiBM,MAAeL,EAAQtB,EAAY4B,QAC7D,IAAMC,EAAkBC,YAAsBR,EAAMS,QAASC,KACvDC,EAAmBC,YAAaZ,EAAOU,IAAoBH,GAG3DM,EAA+BC,mBAAQ,WAE3C,OAAId,IAAUtB,EAAYwB,IAAYhC,EAAc6C,SAC/CJ,EAGEA,EAAiBK,GAAGrB,IACvBY,EACErC,EAAc+C,QACd/C,EAAcgD,aAChBhD,EAAc6C,SAPY7C,EAAciD,UAQ3C,CAACR,EAAkBJ,EAAiBP,EAAOtB,IAExC0C,EAAiBC,cAEjBC,EAAUC,sBAAW,sBAAC,4BAAA1C,EAAA,yDACtBgC,IAAkB3C,EAAcgD,aADV,uBAExBnC,QAAQC,MAAM,oCAFU,0CAMHgB,EAAMsB,QAAQZ,IAAoBnB,IAN/B,OAMpBiC,EANoB,OAO1BJ,EAAeI,EAAU,CACvBC,QAAQ,WAAD,OAAazB,EAAM0B,QAC1BC,SAAU,CACRC,aAAc5B,EAAMS,QACpBoB,QAASnB,OAXa,2CAczB,CAACG,EAAeb,EAAOoB,IAE1B,MAAO,CAACP,EAAeS,I,WGkFnBQ,GAAqBC,IAAOC,IAAV,iEACZ,SAACC,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAChC,SAACF,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAGpCC,GAAwBL,IAAOC,IAAV,iLAEhB,SAACC,GAAD,OAAWA,EAAMC,MAAMG,MAAMC,KAAK,QAOvCC,GAAiBC,YAAW,CAChCC,KAAM,CACJC,gBAAiB,QACjBL,MAAO,UACP,UAAW,CACTK,gBAAiB,OACjBL,MAAO,WAETM,SAAU,CACRD,gBAAiB,WATAF,CAYpBI,KAEYC,GAhJsB,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,UAA0D,KAA/CC,UAA+C,EAApCC,kBAAoC,MAAxB,GAAwB,MAApBC,gBAAoB,MAAT,GAAS,EAC1FvE,EAAcC,cACZuE,EAAYC,cAAZD,QACFE,GAAcC,OAAOH,GAAW,MAAMI,QAAQ,GAAGC,WACjDC,EAAcC,YAAgB/E,EAAY0B,MAC1CsD,EAAgBD,YAAgB/E,EAAY4B,QAClD,EAAsBjC,mBAAS,IAA/B,mBAAOsF,EAAP,KAAYC,EAAZ,KACA,EAAwCvF,mBAAS4B,KAAjD,mBAAOF,EAAP,KAAqB8D,EAArB,KACA,EAAsDxF,mBAAS+E,GAA/D,mBAAOU,EAAP,KAA4BC,EAA5B,KACA,EAAgC1F,mBAAS,CAAE2F,OAAQ,IAAKC,OAAQ,MAAhE,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA6CrE,GAAiBC,GAA9D,mBAAOqE,EAAP,KAA4BC,EAA5B,KACMC,EAAiBnG,EAAW,eAC5BoG,EAAmBpG,EAAW,iBAC9BqG,GAAc1D,mBAAQ,kBAAOwD,GAAkC,OAAO,CAACA,IACvEG,GAAgB3D,mBAAQ,kBAAOyD,GAAsC,OAAO,CAACA,IAC7EG,GAAiB1B,EAAU2B,WAAWxE,KAArB,OAAoCqE,SAApC,IAAoCA,QAApC,EAAoCA,GAAaI,UAAjD,OAA6DH,SAA7D,IAA6DA,QAA7D,EAA6DA,GAAeG,UASnG,IAYMC,GAAY,uCAAG,WAAOC,GAAP,eAAAjG,EAAA,yDACW,KAA1BiG,EAAEC,cAAcC,OAA0C,IAA1BF,EAAEC,cAAcC,QAClDpB,EAAOkB,EAAEC,cAAcC,OACvBb,EAAY,CAAEH,OAAQ,IAAKC,OAAQ,OAlBpBgB,EAoBFH,EAAEC,cAAcC,OAnBvBE,MAAMC,WAAWF,KAAOG,SAASH,GActB,wDAMnBrB,EAAOkB,EAAEC,cAAcC,OANJ,SAOOtG,EAAY2G,cAActF,EAAciD,EAAWsC,OAAOR,EAAEC,cAAcC,QAPjF,OAObO,EAPa,OAQnBpB,EAAY,CAAEH,OAAQuB,EAAY,GAAGhC,WAAYU,OAAQsB,EAAY,GAAGhC,aARrD,iCAfrB,IAAmB0B,IAeE,OAAH,sDAWZO,GAAe,uCAAG,4BAAA3G,EAAA,6DACtB+E,EAAOE,GADe,SAEIpF,EAAY2G,cAActF,EAAciD,EAAWsC,OAAOxB,IAF9D,OAEhByB,EAFgB,OAGtBpB,EAAY,CAAEH,OAAQuB,EAAY,GAAGhC,WAAYU,OAAQsB,EAAY,GAAGhC,aAHlD,2CAAH,qDAMrB,OACE,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAI,iBAAY3C,KAC5B,kBAAC4C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,aACa,IACX,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,wBAAlD,iBAKF,kBAACnE,GAAD,MACA,kBAACoE,EAAA,EAAD,CAAYC,MAAO,CAAE9D,MAAO,WAAa+D,GAAG,SAA5C,4BAGA,kBAACC,EAAA,EAAD,CACEC,SA5CoB,SAACC,GACzB,IAAMvB,EAAQuB,EAAMR,OAAOf,MAC3BnB,EAAgBmB,GAChBjB,EAAuBX,GACnBmD,EAAMR,OAAOf,QAAU3E,KACzB0D,EAAuByC,YAAkB9C,EAAeT,IAEtDsD,EAAMR,OAAOf,QAAU7E,KACzB4D,EAAuByC,YAAkBhD,EAAaP,KAqCpDkD,MAAO,CAAE9D,MAAO,WAChBoE,QAAQ,QACRL,GAAG,SACHpB,MAAOjF,GAEP,kBAACwC,GAAD,CAAgByC,MAAO/E,KAAvB,OACA,kBAACsC,GAAD,CAAgByC,MAAO3E,KAAvB,WAIF,kBAACqG,EAAA,EAAD,CACEC,YAAanB,GACbc,SAAUzB,GACVG,MAAOrB,EACPiD,IAAK9C,EACLpC,OAAQ3B,IAEV,kBAAC8G,EAAA,EAAD,CAAOlB,KAAK,oBACZ,kBAACvD,GAAD,KACG,IACAY,EAFH,KAEgBK,OAAOa,EAASF,QAAUX,OAAOqB,KAEjD,kBAACtC,GAAD,KACG,IADH,IAEIiB,OAAOa,EAASF,QAFpB,IAE8B/D,IAF9B,MAE6CoD,OAAOa,EAASD,QAAS,IACnEjB,EAAU2B,WAAWxE,KAAeA,IAAcE,IAHrD,IAGqE,KAErE,kBAACyG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1E,MAAM,UACNwD,QAAQ,YACRmB,QAAS,kBACP5C,IAAwBlG,EAAc6C,SAAWsD,IAAkBvB,EAAU/C,EAAciD,EAAWW,KAGvGS,IAAwBlG,EAAc6C,SAAW,UAAY,aAIlE,kBAACe,GAAD,MACA,kBAACmF,GAAA,EAAD,CAAOpB,QAAQ,SAASqB,SAAS,WAAjC,yC,WCzGAC,GAAkBC,YAAH,0EAOfC,GAAYC,cAAW,SAACpF,GAAD,MAAY,CACvCqF,OAAO,eACJrF,EAAMsF,YAAYC,KAAK,OAAS,CAC/BC,UAAW,aA+RFC,GA1RF,WACKN,KAAhB,IAcIO,EACAC,EAdEC,EAAM5I,IACNoF,EAAiBnG,EAAW,eAC5BoG,EAAmBpG,EAAW,gBAC9B4J,EAAYC,cACZC,EAAcC,cACdC,EAAaC,cAEnB,GADoBzJ,cACqC0J,eAA1CC,EAAf,EAAQC,MAA8BC,EAAtC,EAAyBC,YAEnBC,EAAWZ,EADea,cAAxBzF,QAGR,EAAmF0F,cAA3EC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,eAAgBC,EAAnD,EAAmDA,eAAgBC,EAAnE,EAAmEA,YAQjErB,EAAOsB,OACPrB,EAASsB,SAGgEvB,EAAKnH,QACHoH,EAAOpH,QAEhEK,mBAAQ,kBAAOwD,GAAkC,OAAO,CAACA,IACvDxD,mBAAQ,kBAAOyD,GAAsC,OAAO,CAACA,IAJnF,IAKM6E,EAAqBtI,mBACzB,kBAAOiH,EAAY1E,OAAO0E,EAAUsB,gBAAgB/F,QAAQ,GAAK,OACjE,CAACyE,IAEGuB,EAAiBxI,mBAAQ,kBAAOiH,EAAY1E,OAAO0E,EAAUwB,YAAYjG,QAAQ,GAAK,OAAO,CAACyE,IAC9FyB,EAAwB1I,mBAAQ,kBAAOiH,EAAYzC,OAAOyC,EAAU0B,mBAAqB,OAAO,CAAC1B,IACjG2B,EAAkB5I,mBAAQ,kBAAOiH,EAAYzC,OAAOyC,EAAU4B,aAAe,OAAO,CAAC5B,IA2BrF6B,GAzBuB9I,mBAC3B,kBAAOmH,EAAc5E,OAAO4E,EAAYoB,gBAAgB/F,QAAQ,GAAK,OACrE,CAAC2E,IAEsBnH,mBACvB,kBAAOmH,EAAc5E,OAAO4E,EAAYsB,YAAYjG,QAAQ,GAAK,OACjE,CAAC2E,IAE6BnH,mBAC9B,kBAAOmH,EAAc3C,OAAO2C,EAAYwB,mBAAqB,OAC7D,CAACxB,IAEuBnH,mBAAQ,kBAAOmH,EAAc3C,OAAO2C,EAAY0B,aAAe,OAAO,CAAC1B,IAErEnH,mBAC1B,kBAAOqH,EAAa9E,OAAO8E,EAAWkB,gBAAgB/F,QAAQ,GAAK,OACnE,CAAC6E,IAEqBrH,mBAAQ,kBAAOqH,EAAa9E,OAAO8E,EAAWoB,YAAYjG,QAAQ,GAAK,OAAO,CAAC6E,IACxErH,mBAC7B,kBAAOqH,EAAa7C,OAAO6C,EAAWsB,mBAAqB,OAC3D,CAACtB,IAEsBrH,mBAAQ,kBAAOqH,EAAa7C,OAAO6C,EAAWwB,aAAe,OAAO,CAACxB,IAE5E0B,YAAO,CAAEC,iBAAkB,iBACvCC,EAAcF,YAAO,CAAEC,iBAAkB,kBAEzCE,EAAajI,IAAOlD,EAAV,oHAMhB,EAA8CoL,YAC5C,kBAAC,GAAD,CACEhH,SAAU,GACVH,UAAW,SAAC/C,EAAciD,EAAWkH,GAC/B7G,OAAO6G,IAAW,GAAKhF,MAAM7B,OAAO6G,MACxCN,EAAUO,MAAMpK,EAAciD,EAAWkH,GACzCE,MAEFpH,UAAW,iBARf,mBAAyBoH,GAAzB,WAYA,GAAkDH,YAChD,kBAAC,GAAD,CACEhH,SAAU,GACVH,UAAW,SAAC/C,EAAciD,EAAWkH,GAC/B7G,OAAO6G,IAAW,GAAKhF,MAAM7B,OAAO6G,MACxCH,EAAYI,MAAMpK,EAAciD,EAAWkH,GAC3CG,OAEFrH,UAAW,mBARf,qBAA2BqH,IAA3B,aAYA,OACE,kBAACC,EAAA,EAAD,KACE,kBAACnD,GAAD,MACA,kBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACrI,QAAS,GAMvB,kBAACoI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,WAAW,SAASC,QAAQ,UAC7C,kBAACC,EAAA,EAAD,CAAMC,UAAW,EAAG3E,MAAO,CAAE4E,OAAQ,2BACnC,kBAACC,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACrI,QAAS,EAAGgE,MAAO,CAAE8E,QAAS,OAAQN,WAAY,YAChE,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGvE,MAAO,CAAE8E,QAAS,SAClC,kBAACJ,EAAA,EAAD,CAAMC,UAAW,EAAG3E,MAAO,CAAE+E,OAAQ,OAAQD,QAAS,OAAQE,cAAe,SAAUC,eAAgB,SAAUT,WAAY,WAC3H,kBAACK,EAAA,EAAD,CAAalF,MAAM,UACjB,wBAAIK,MAAO,CAAEkF,aAAc,SAA3B,sBACA,kBAAC,IAAD,CAASlF,MAAO,CAAEmF,SAAU,OAAQC,aAAc,QAAUC,IAAK9C,EAAU+C,UAAU,IAAIC,OAAO,MAEhG,kBAACnB,EAAA,EAAD,CAAMC,WAAS,EAACrI,QAAS,EAAGwI,WAAW,SAASC,QAAQ,SAASzE,MAAO,CAAEuB,UAAW,SACnF,kBAAC6C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC3D,EAAA,EAAD,CAAQlB,QAAQ,YAAYxD,MAAM,UAAU0D,OAAO,SAASE,KAAK,mHAAmH0F,WAAS,GAA7L,aAIF,kBAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC3D,EAAA,EAAD,CAAQlB,QAAQ,YAAYxD,MAAM,UAAU0D,OAAO,SAASE,KAAK,mHAAmH0F,WAAS,GAA7L,cAIF,kBAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC3D,EAAA,EAAD,CAAQlB,QAAQ,YAAYE,OAAO,SAASE,KAAK,0EAA0E0F,WAAS,GAApI,eAIF,kBAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC3D,EAAA,EAAD,CAAQlB,QAAQ,YAAYE,OAAO,SAASE,KAAK,0EAA0E0F,WAAS,GAApI,oBASV,kBAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGvE,MAAO,CAAE8E,QAAS,SAClC,kBAACJ,EAAA,EAAD,CAAMC,UAAW,EAAG3E,MAAO,CAAE+E,OAAQ,OAAQU,KAAM,MACjD,kBAACZ,EAAA,EAAD,CAAa7E,MAAO,CAAE0F,QAAS,SAC/B,kEACA,0GACA,wEAA6C,kBAAC7B,EAAD,CAAY/D,KAAK,KAAjB,SAA7C,4BACA,4DACgC,kBAAC+D,EAAD,CAAY/D,KAAK,UAAjB,SADhC,oEAEsC,kBAAC+D,EAAD,CAAY/D,KAAK,KAAjB,aAFtC,mDA2BZ,kBAACsE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIoB,GAAI,GACrB,kBAACjB,EAAA,EAAD,CAAM1E,MAAO,CAAEzD,gBAAiB,cAAeqJ,UAAW,OAAQhB,OAAQ,2BACxE,kBAACC,EAAA,EAAD,CAAalF,MAAM,SAASK,MAAO,CAAE6F,SAAU,aAC7C,mCACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG/F,MAAO,CAAEzD,gBAAiB,2BACpC,kBAACyJ,EAAA,EAAD,CAAUhG,MAAO,CAAEzD,gBAAiB,2BAClC,kBAAC0J,EAAA,EAAD,CAAa1K,OAAO,MAAMyE,MAAO,CAAEzD,gBAAiB,8BAJ1D,gBAQE,kBAACuJ,EAAA,EAAD,KACE,0BAAM9F,MAAO,CAAEmF,SAAU,SAAzB,IAAqChD,GAAsB,SAA3D,SAEF,0BAAMnC,MAAO,CAAEmF,SAAU,SAEvB,6BAFF,qBAGqB9C,EAAelF,QAAQ,GAH5C,KAGiD,6BAC/C,6BACA,iCAOR,kBAACiH,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIoB,GAAI,GACrB,kBAACjB,EAAA,EAAD,CAAM1E,MAAO,CAAEzD,gBAAiB,cAAeqJ,UAAW,OAAQhB,OAAQ,2BACxE,kBAACC,EAAA,EAAD,CAAalF,MAAM,SAASK,MAAO,CAAE6F,SAAU,aAC7C,oCACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG/F,MAAO,CAAEzD,gBAAiB,2BACpC,kBAACyJ,EAAA,EAAD,CAAUhG,MAAO,CAAEzD,gBAAiB,2BAClC,kBAAC0J,EAAA,EAAD,CAAa1K,OAAO,OAAOyE,MAAO,CAAEzD,gBAAiB,8BAJ3D,gBAQE,kBAACuJ,EAAA,EAAD,KACE,0BAAM9F,MAAO,CAAEmF,SAAU,SAAWhC,GAAkC,SAAtE,SAEF,kBAAC2C,EAAA,EAAD,KACE,0BAAM9F,MAAO,CAAEmF,SAAU,OAAQe,aAAc,eAA/C,IACIjD,GAA0C,SAGhD,0BAAMjD,MAAO,CAAEmF,SAAU,SAAzB,iBACiB9B,EAAwBJ,GAAoB9F,QAAQ,GADrE,IACyE,6BADzE,uBAEuBkG,EAFvB,IAE8C,6BAF9C,iBAGiBE,MAOvB,kBAACa,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIoB,GAAI,GACrB,kBAACjB,EAAA,EAAD,CAAM1E,MAAO,CAAEzD,gBAAiB,cAAeqJ,UAAW,OAAQhB,OAAQ,2BACxE,kBAACC,EAAA,EAAD,CAAalF,MAAM,SAASK,MAAO,CAAE6F,SAAU,aAC7C,qCACA,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAa1K,OAAO,WAJ1B,gBAQE,kBAACuK,EAAA,EAAD,KACE,0BAAM9F,MAAO,CAAEmF,SAAU,SAAWzC,GAAgC,SAApE,SAEF,kBAACoD,EAAA,EAAD,KACE,0BAAM9F,MAAO,CAAEmF,SAAU,SAAzB,IAAqCxC,GAA0B,SAEjE,0BAAM3C,MAAO,CAAEmF,SAAU,SAAzB,gBACgBvC,EADhB,IACgC,6BADhC,cAEcC,EAFd,IAE8B,6BAF9B,iBAGiBC,U,iCCnS/B,6BA2BeqD,IAtBf,WACE,IAAMlL,EAAiBC,cACjBkL,EAAWC,cAEjB,OAAOjL,uBACL,SAACkL,EAAuChL,GACtCgL,EACGC,MAAK,SAACC,GAAD,OAAQvL,EAAeuL,EAAI,CAAElL,eAClCmL,OAAM,SAACC,GACN,IAAIA,EAAIC,QAAQC,SAAS,eAAzB,CAIA,IAAMD,EAAO,oBAAgBrL,EAAQ,GAAGuL,eAA3B,OAA2CvL,EAAQwL,MAAM,IACtElO,QAAQC,MAAR,UAAiB8N,EAAjB,aAA6BD,EAAIC,SAAWD,EAAIK,QAChDX,EAAS,CAAEvN,MAAO,CAAE8N,UAASI,MAAOL,EAAIC,SAAWD,EAAIK,eAG7D,CAACX,EAAUnL,M,iGCdT+L,E,MAAiBpL,EAAOC,IAAV,mQAUD,SAACC,GAAD,OAAWA,EAAMC,MAAMC,QAAQ,MAGnCgK,EAf2B,SAAC,GAAD,IAAGiB,EAAH,EAAGA,SAAH,OAAkB,kBAACD,EAAD,KAAiBC,K,8FCkB9DpF,IApBM,WACnB,MAAwB3J,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACQ8O,EAAgB5O,cAAhB4O,YACF3O,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIN,EAFJ,SAEkBG,EAAY4O,cAF9B,kFAKIvO,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASduO,KACC,CAAChP,EAASG,EAAa2O,IAEnB/O,I,6HChBHkP,EAAO,IAAIC,IAAK,kCAEhBC,EAAW,CAAC,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,OAAQ,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,WAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,WAAY,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,UAAW,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,cAAe,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,QAAS,KAAQ,WAAa,CAAE,KAAQ,MAAO,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,eAAgB,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,WAAY,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,UAAa,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,CAAE,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,YAAa,QAAW,CAAE,CAAE,KAAQ,UAAW,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,SAAU,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,WAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAO,OAAU,CAAE,CAAE,KAAQ,MAAO,KAAQ,WAAa,CAAE,KAAQ,SAAU,KAAQ,YAAe,KAAQ,WAAY,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,SAAY,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,CAAE,CAAE,KAAQ,SAAU,KAAQ,WAAa,CAAE,KAAQ,WAAY,KAAQ,YAAe,KAAQ,YAAa,QAAW,CAAE,CAAE,KAAQ,GAAI,KAAQ,YAAe,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,SAAW,EAAM,gBAAmB,UAAW,KAAQ,YAAc,CAAE,WAAa,EAAO,OAAU,CAAE,CAAE,SAAW,EAAM,KAAQ,QAAS,KAAQ,WAAa,CAAE,SAAW,EAAM,KAAQ,UAAW,KAAQ,WAAa,CAAE,SAAW,EAAO,KAAQ,QAAS,KAAQ,YAAe,KAAQ,WAAY,KAAQ,SAAW,CAAE,WAAa,EAAO,OAAU,CAAE,CAAE,SAAW,EAAM,KAAQ,OAAQ,KAAQ,WAAa,CAAE,SAAW,EAAM,KAAQ,KAAM,KAAQ,WAAa,CAAE,SAAW,EAAO,KAAQ,QAAS,KAAQ,YAAe,KAAQ,WAAY,KAAQ,UAC/9EC,EAAkB,6CAgIThF,IAnGf,WACI,IAAMiF,EAAc,IAAIJ,EAAKK,IAAIC,SAASJ,EAAU,8CAC9CK,EAAO,IAAIP,EAAKK,IAAIC,SAASJ,EAAU,8CAC7C,EAA8BrP,mBAAS,GAAvC,mBAAO6E,EAAP,KAAgB8K,EAAhB,KACA,EAAwD3P,mBAAS,GAAjE,mBAAO4P,EAAP,KAA6BC,EAA7B,KACA,EAAkD7P,mBAAS,GAA3D,mBAAO8P,EAAP,KAA0BC,EAA1B,KACA,EAAwD/P,mBAAS,GAAjE,mBAAOgQ,EAAP,KAA6BC,EAA7B,KACA,EAAwCjQ,mBAAS,GAAjD,mBAAOkQ,EAAP,KAAqBC,EAArB,KACA,EAA8CnQ,mBAAS,GAAvD,mBAAOoQ,EAAP,KAAwBC,EAAxB,KACA,EAA8CrQ,mBAAS,GAAvD,mBAAOsQ,EAAP,KAAwBC,EAAxB,KAYA,OAVAhQ,qBAAU,WACNiQ,IACA,IAAMC,EAAWC,aAAY,WACzBF,MACD,KACH,OAAO,WACHG,cAAcF,MAEnB,IAEI,CAAE5L,UAAS+K,uBAAsBE,oBAAmBE,uBAAsBE,eAAcE,kBAAiBE,mBArBjF,SAuBhBE,IAvBgB,2EAuB/B,wCAAAhQ,EAAA,sEAK2BoQ,IAAM,8EALjC,uBAKYC,EALZ,EAKYA,KALZ,KAM+B1B,EAAK2B,MANpC,SAMwDvB,EAAYwB,QAAQC,UAAU1B,GAAiB2B,OANvG,0BAMUC,EANV,KAM0CC,QAN1C,gBAOUC,EAAeF,EAAqBL,EAAK,GAAGQ,cAKlD3Q,QAAQ4Q,IAAR,wBAA6BF,IAC7B1Q,QAAQ4Q,IAAR,2BAAgC,IAbpC,UAckCC,EAAW,6CAA8C,8CAd3F,eAcUC,EAdV,iBAe+BD,EAAW,6CAA8C,8CAfxF,eAeUE,EAfV,iBAgBkCF,EAAW,6CAA8C,8CAhB3F,eAgBUG,EAhBV,OAiBI/B,EAAW,EAAIyB,EAAeI,EAAkBC,EAAeC,GAC/D7B,EAAwB2B,GACxBzB,EAAqB0B,GACrBxB,EAAwByB,GApB5B,KAqBIvB,EArBJ,UAqB0BwB,IArB1B,+CAsBItB,EAtBJ,UAsB6BuB,IAtB7B,+CAuBIrB,EAvBJ,UAuB6BsB,IAvB7B,gFAvB+B,+BAiDhBF,IAjDgB,2EAiD/B,kCAAAnR,EAAA,6DACUsR,EAAY,IAAI3C,EAAKK,IAAIC,SAASJ,EAAU,8CADtD,SAE2BuB,IAAM,4IAFjC,uBAEYC,EAFZ,EAEYA,KAFZ,KAGqB7L,OAHrB,KAG4BmK,EAAK2B,MAHjC,SAGqDgB,EAAUf,QAAQC,UAAU1B,GAAiB2B,OAHlG,oCAGuCE,QAHvC,yCAG6GnM,OAAO6L,EAAK3G,OAA/G6H,EAHV,4BAKWA,GALX,6CAjD+B,+BAyDhBH,IAzDgB,2EAyD/B,kCAAApR,EAAA,6DACUwR,EAAe,IAAI7C,EAAKK,IAAIC,SAASJ,EAAU,8CADzD,SAE2BuB,IAAM,4IAFjC,uBAEYC,EAFZ,EAEYA,KAFZ,KAGqB7L,OAHrB,KAG4BmK,EAAK2B,MAHjC,SAGqDkB,EAAajB,QAAQC,UAAU1B,GAAiB2B,OAHrG,oCAGuCE,QAHvC,yCAGgHnM,OAAO6L,EAAK3G,OAAlH6H,EAHV,4BAKWA,GALX,6CAzD+B,+BAiEhBF,IAjEgB,2EAiE/B,kCAAArR,EAAA,6DACUyR,EAAe,IAAI9C,EAAKK,IAAIC,SAASJ,EAAU,8CADzD,SAE2BuB,IAAM,4IAFjC,uBAEYC,EAFZ,EAEYA,KAFZ,KAGqB7L,OAHrB,KAG4BmK,EAAK2B,MAHjC,SAGqDmB,EAAalB,QAAQC,UAAU1B,GAAiB2B,OAHrG,oCAGuCE,QAHvC,yCAGgHnM,OAAO6L,EAAK3G,OAAlH6H,EAHV,4BAKWA,GALX,6CAjE+B,+BAyEhBR,EAzEgB,gFAyE/B,WAA0BW,EAAW3O,GAArC,6BAAA/C,EAAA,6DACUmB,EAAQ,IAAIwN,EAAKK,IAAIC,SAASJ,EAAU9L,GACxC4O,EAAU,IAAIhD,EAAKK,IAAIC,SAASJ,EAAU6C,GAFpD,SAG2BtB,IAAM,8DAHjC,uBAGYC,EAHZ,EAGYA,KAHZ,KAIsB7L,OAJtB,KAI6BmK,EAAK2B,MAJlC,UAIsDpB,EAAKqB,QAAQC,UAAUkB,GAAWjB,OAJxF,qCAIwCE,QAJxC,yCAImGnM,OAAO6L,EAAK3G,OAArGkI,EAJV,eAMuBpN,OANvB,UAMoCqN,EAAc9O,GANlD,oDAMmEyB,OANnE,MAM0EmK,EAAK2B,MAN/E,UAMmGnP,EAAMoP,QAAQC,UAAUkB,GAAWjB,OANtI,wCAMqFE,QANrF,wCAMUmB,EANV,iBAQ2BF,EAAYE,EARvC,MAQqDtN,OARrD,MAQ4DmK,EAAK2B,MARjE,UAQqFqB,EAAQpB,QAAQzF,cAAc2F,OARnH,wCAQuEE,QARvE,yCAQUoB,EARV,kBAUkBA,EAVlB,MAUkCvN,OAVlC,MAUyCmK,EAAK2B,MAV9C,UAUkEqB,EAAQpB,QAAQC,UAAU1B,GAAiB2B,OAV7G,wCAUoDE,QAVpD,yCAUUqB,EAVV,YAYI9R,QAAQ4Q,IAAIc,GACZ1R,QAAQ4Q,IAAIgB,GACZ5R,QAAQ4Q,IAAIiB,GACZ7R,QAAQ4Q,IAAIkB,GAfhB,kBAiBWA,GAjBX,6CAzE+B,+BA6FhBH,EA7FgB,8EA6F/B,WAA6B9O,GAA7B,iBAAA/C,EAAA,sEAC2BoQ,IAAM,mEAAD,OAAoErN,EAApE,mCADhC,uBACYsN,EADZ,EACYA,KADZ,kBAEWA,EAAK3G,OAFhB,4CA7F+B,yB,iCCtCnC,6BAqBesB,IAhBA,SAACiH,GACd,IAAMpS,EAAcC,cACdoS,EAA2BzE,cAWjC,MAAO,CAAEnC,MATS5I,uBAChB,SAACxB,EAAsBiD,EAAmBkH,GACxC6G,EACErS,EAAYsS,MAAMjR,EAAciD,EAAWkH,GADrB,cAEfA,EAFe,eAEF4G,EAAKhH,iBAFH,QAK1B,CAACgH,EAAMpS,EAAaqS,O,8FCST3I,IApBM,WACnB,MAAwB/J,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACQC,EAAgBC,cAAhBD,YACFE,EAAcC,cAcpB,OAZAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIN,EAFJ,SAEkBG,EAAYuS,cAF9B,kFAKIlS,QAAQC,MAAR,MALJ,0DADc,uBAAC,WAAD,wBASdkS,KACC,CAAC3S,EAASG,EAAaF,IAEnBF,I,8FCEM6S,IAnBO,WACpB,MAAwB9S,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACQC,EAAgBC,cAAhBD,YACFE,EAAcC,cAapB,OAXAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,2EAEIN,EAFJ,SAEkBG,EAAY0S,eAF9B,kFAIIrS,QAAQC,MAAR,MAJJ,0DADc,uBAAC,WAAD,wBAQdqS,KACC,CAAC9S,EAASG,EAAaF,IAEnBF","file":"static/js/15.d167e1c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.87c905bf.png\";","import { BigNumber, ethers } from 'ethers';\nimport { useCallback, useMemo } from 'react';\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\nimport useAllowance from './useAllowance';\nimport ERC20 from '../tomb-finance/ERC20';\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\nimport useTombFinance from './useTombFinance';\n\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\n  const tombFinance = useTombFinance();\n  let token: ERC20;\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.TOMB;\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.TSHARE;\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    // we might not have enough data to know whether or not we need to approve\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED;\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\n\n  const addTransaction = useTransactionAdder();\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\n    addTransaction(response, {\n      summary: `Approve ${token.symbol}`,\n      approval: {\n        tokenAddress: token.address,\n        spender: ZAPPER_ROUTER_ADDR,\n      },\n    });\n  }, [approvalState, token, addTransaction]);\n\n  return [approvalState, approve];\n}\n\nexport default useApproveZapper;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { LPStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useLpStats = (lpTicker: string) => {\n  const [stat, setStat] = useState<LPStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchLpPrice() {\n      try{\n        setStat(await tombFinance.getLPStat(lpTicker));\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchLpPrice();\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\n\n  return stat;\n};\n\nexport default useLpStats;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport useRefresh from './useRefresh';\n\nconst useTotalValueLocked = () => {\n  const [totalValueLocked, setTotalValueLocked] = useState<Number>(0);\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTVL() {\n      try {\n        setTotalValueLocked(await tombFinance.getTotalValueLocked());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchTVL();\n  }, [setTotalValueLocked, tombFinance, slowRefresh]);\n\n  return totalValueLocked;\n};\n\nexport default useTotalValueLocked;\n","import React, { useState, useMemo } from 'react';\n\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\n// import Button from '../../../components/Button'\nimport Modal, { ModalProps } from '../../../components/Modal';\nimport ModalActions from '../../../components/ModalActions';\nimport ModalTitle from '../../../components/ModalTitle';\nimport TokenInput from '../../../components/TokenInput';\nimport styled from 'styled-components';\n\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport Label from '../../../components/Label';\nimport useLpStats from '../../../hooks/useLpStats';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTombFinance from '../../../hooks/useTombFinance';\nimport { useWallet } from 'use-wallet';\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\nimport { Alert } from '@material-ui/lab';\n\ninterface ZapProps extends ModalProps {\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\n  tokenName?: string;\n  decimals?: number;\n}\n\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\n  const tombFinance = useTombFinance();\n  const { balance } = useWallet();\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\n  const tombBalance = useTokenBalance(tombFinance.TOMB);\n  const tshareBalance = useTokenBalance(tombFinance.TSHARE);\n  const [val, setVal] = useState('');\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\n  const tombFtmLpStats = useLpStats('TOMB-FTM-LP');\n  const tShareFtmLpStats = useLpStats('TSHARE-FTM-LP');\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\n  /**\n   * Checks if a value is a valid number or not\n   * @param n is the value to be evaluated for a number\n   * @returns\n   */\n  function isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  const handleChangeAsset = (event: any) => {\n    const value = event.target.value;\n    setZappingToken(value);\n    setZappingTokenBalance(ftmBalance);\n    if (event.target.value === TSHARE_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\n    }\n    if (event.target.value === TOMB_TICKER) {\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\n    }\n  };\n\n  const handleChange = async (e: any) => {\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\n      setVal(e.currentTarget.value);\n      setEstimate({ token0: '0', token1: '0' });\n    }\n    if (!isNumeric(e.currentTarget.value)) return;\n    setVal(e.currentTarget.value);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  const handleSelectMax = async () => {\n    setVal(zappingTokenBalance);\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\n  };\n\n  return (\n    <Modal>\n      <ModalTitle text={`Zap in ${tokenName}`} />\n      <Typography variant=\"h6\" align=\"center\">\n        Powered by{' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\n          mlnl.finance\n        </a>\n      </Typography>\n\n      <StyledActionSpacer />\n      <InputLabel style={{ color: '#2c2560' }} id=\"label\">\n        Select asset to zap with\n      </InputLabel>\n      <Select\n        onChange={handleChangeAsset}\n        style={{ color: '#2c2560' }}\n        labelId=\"label\"\n        id=\"select\"\n        value={zappingToken}\n      >\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\n        <StyledMenuItem value={TSHARE_TICKER}>TSHARE</StyledMenuItem>\n        {/* Tomb as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\n        {/* <StyledMenuItem value={TOMB_TICKER}>TOMB</StyledMenuItem> */}\n      </Select>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={zappingTokenBalance}\n        symbol={zappingToken}\n      />\n      <Label text=\"Zap Estimations\" />\n      <StyledDescriptionText>\n        {' '}\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\n      </StyledDescriptionText>\n      <StyledDescriptionText>\n        {' '}\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\n      </StyledDescriptionText>\n      <ModalActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() =>\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\n          }\n        >\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\n        </Button>\n      </ModalActions>\n\n      <StyledActionSpacer />\n      <Alert variant=\"filled\" severity=\"warning\">\n        Beta feature. Use at your own risk!\n      </Alert>\n    </Modal>\n  );\n};\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledDescriptionText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.color.grey[400]};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 22px;\n  justify-content: flex-start;\n`;\nconst StyledMenuItem = withStyles({\n  root: {\n    backgroundColor: 'white',\n    color: '#2c2560',\n    '&:hover': {\n      backgroundColor: 'grey',\n      color: '#2c2560',\n    },\n    selected: {\n      backgroundColor: 'black',\n    },\n  },\n})(MenuItem);\n\nexport default ZapModal;\n","import React, { useMemo } from 'react';\nimport Page from '../../components/Page';\nimport HomeImage from '../../assets/img/home.png';\nimport Image from 'material-ui-image';\nimport styled from 'styled-components';\nimport { Alert } from '@material-ui/lab';\nimport { createGlobalStyle } from 'styled-components';\nimport CountUp from 'react-countup';\nimport CardIcon from '../../components/CardIcon';\nimport TokenSymbol from '../../components/TokenSymbol';\nimport useTombStats from '../../hooks/useTombStats';\nimport useLpStats from '../../hooks/useLpStats';\nimport useModal from '../../hooks/useModal';\nimport useZap from '../../hooks/useZap';\nimport useBondStats from '../../hooks/useBondStats';\nimport usetShareStats from '../../hooks/usetShareStats';\nimport useTotalValueLocked from '../../hooks/useTotalValueLocked';\nimport useETHPrice from '../../hooks/useETHPrice';\nimport { tomb as tombTesting, tShare as tShareTesting } from '../../tomb-finance/deployments/deployments.testing.json';\nimport { tomb as tombProd, tShare as tShareProd } from '../../tomb-finance/deployments/deployments.mainnet.json';\n\nimport useTotalTreasuryBalance from '../../hooks/useTotalTreasuryBalance.js';\nimport useSHAREPrice from '../../hooks/useSHAREPrice.js';\n\nimport { Box, Button, Card, CardContent, Grid, Paper } from '@material-ui/core';\nimport ZapModal from '../Bank/components/ZapModal';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport useTombFinance from '../../hooks/useTombFinance';\n\nconst BackgroundImage = createGlobalStyle`\n\n* {\n    border-radius: 0 !important;\n}\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    [theme.breakpoints.down('415')]: {\n      marginTop: '10px',\n    },\n  }\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const TVL = useTotalValueLocked();\n  const tombFtmLpStats = useLpStats('BETH-ETH LP');\n  const tShareFtmLpStats = useLpStats('SHARE-ETH LP');\n  const tombStats = useTombStats();\n  const tShareStats = usetShareStats();\n  const tBondStats = useBondStats();\n  const tombFinance = useTombFinance();\n  const { price: ftmPrice, priceChange: ftmPriceChange } = useETHPrice();\n  const { balance: rebatesTVL } = useTotalTreasuryBalance();\n  const totalTVL = TVL + rebatesTVL;\n\n  const { SHAREPriceETH, SHAREPrice, SHAREMarketCap, SHARELiquidity, SHARESupply } = useSHAREPrice();\n\n  let tomb;\n  let tShare;\n  if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    tomb = tombTesting;\n    tShare = tShareTesting;\n  } else {\n    tomb = tombProd;\n    tShare = tShareProd;\n  }\n\n  const buyTombAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tomb.address;\n  const buyTShareAddress = 'https://spookyswap.finance/swap?outputCurrency=' + tShare.address;\n\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\n  const tombPriceInDollars = useMemo(\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\n    [tombStats],\n  );\n  const tombPriceInFTM = useMemo(() => (tombStats ? Number(tombStats.tokenInFtm).toFixed(4) : null), [tombStats]);\n  const tombCirculatingSupply = useMemo(() => (tombStats ? String(tombStats.circulatingSupply) : null), [tombStats]);\n  const tombTotalSupply = useMemo(() => (tombStats ? String(tombStats.totalSupply) : null), [tombStats]);\n\n  const tSharePriceInDollars = useMemo(\n    () => (tShareStats ? Number(tShareStats.priceInDollars).toFixed(2) : null),\n    [tShareStats],\n  );\n  const tSharePriceInFTM = useMemo(\n    () => (tShareStats ? Number(tShareStats.tokenInFtm).toFixed(4) : null),\n    [tShareStats],\n  );\n  const tShareCirculatingSupply = useMemo(\n    () => (tShareStats ? String(tShareStats.circulatingSupply) : null),\n    [tShareStats],\n  );\n  const tShareTotalSupply = useMemo(() => (tShareStats ? String(tShareStats.totalSupply) : null), [tShareStats]);\n\n  const tBondPriceInDollars = useMemo(\n    () => (tBondStats ? Number(tBondStats.priceInDollars).toFixed(2) : null),\n    [tBondStats],\n  );\n  const tBondPriceInFTM = useMemo(() => (tBondStats ? Number(tBondStats.tokenInFtm).toFixed(4) : null), [tBondStats]);\n  const tBondCirculatingSupply = useMemo(\n    () => (tBondStats ? String(tBondStats.circulatingSupply) : null),\n    [tBondStats],\n  );\n  const tBondTotalSupply = useMemo(() => (tBondStats ? String(tBondStats.totalSupply) : null), [tBondStats]);\n\n  const tombLpZap = useZap({ depositTokenName: 'TOMB-FTM-LP' });\n  const tshareLpZap = useZap({ depositTokenName: 'TSHARE-FTM-LP' });\n\n  const StyledLink = styled.a`\n    font-weight: 700;\n    text-decoration: none;\n    color: var(--accent-light);\n  `;\n\n  const [onPresentTombZap, onDissmissTombZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tombLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTombZap();\n      }}\n      tokenName={'TOMB-FTM-LP'}\n    />,\n  );\n\n  const [onPresentTshareZap, onDissmissTshareZap] = useModal(\n    <ZapModal\n      decimals={18}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        tshareLpZap.onZap(zappingToken, tokenName, amount);\n        onDissmissTshareZap();\n      }}\n      tokenName={'TSHARE-FTM-LP'}\n    />,\n  );\n\n  return (\n    <Page>\n      <BackgroundImage />\n      <Grid container spacing={3}>\n\n      {/* <Grid item xs={12} style={{ display: 'flex', justifyContent: 'center', marginBottom: '16px' }}>\n        <img alt=\"Logo\" src={CashImage} style={{ width: '100px', height: 'auto' }} />\n      </Grid> */}\n\n        <Grid item xs={12} alignItems=\"center\" justify=\"center\">\n          <Card elevation={0} style={{ border: \"2px solid var(--white)\" }} >\n            <CardContent>\n              <Grid container spacing={2} style={{ display: 'flex', alignItems: 'stretch' }}>\n                <Grid item xs={5} style={{ display: 'flex' }}>\n                  <Card elevation={1} style={{ margin: '16px', display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <CardContent align=\"center\">\n                      <h2 style={{ marginBottom: '10px' }} >Total Value Locked</h2>\n                      <CountUp style={{ fontSize: '50px', marginBotton: '10px' }} end={totalTVL} separator=\",\" prefix=\"$\" />\n\n                      <Grid container spacing={2} alignItems=\"center\" justify=\"center\" style={{ marginTop: '10px' }}>\n                        <Grid item xs={5}>\n                          <Button variant=\"contained\" color=\"primary\" target=\"_blank\" href=\"https://base.leetswap.finance/#/swap?outputCurrency=0x9Adf0d2C4fEeAc572AC1e2Ca6a0D453017B5F7D9&inputCurrency=ETH\" fullWidth>\n                            Buy BETH\n                          </Button>\n                        </Grid>\n                        <Grid item xs={5}>\n                          <Button variant=\"contained\" color=\"primary\" target=\"_blank\" href=\"https://base.leetswap.finance/#/swap?outputCurrency=0x3FF13895C5449591e3296192649169c9110941F0&inputCurrency=ETH\" fullWidth>\n                            Buy SHARE\n                          </Button>\n                        </Grid>\n                        <Grid item xs={5}>\n                          <Button variant=\"contained\" target=\"_blank\" href=\"https://dexscreener.com/base/0x0a1d560fd03b546273b776144ca16f4adbfcdb16\" fullWidth>\n                            BETH Chart\n                          </Button>\n                        </Grid>\n                        <Grid item xs={5}>\n                          <Button variant=\"contained\" target=\"_blank\" href=\"https://dexscreener.com/base/0x847ae7a90c5d509f9f68e76641f20b70615baf74\" fullWidth>\n                            SHARE Chart\n                          </Button>\n                        </Grid>\n                      </Grid>\n\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={7} style={{ display: 'flex' }}>\n                  <Card elevation={1} style={{ margin: '16px', flex: '1' }}>\n                    <CardContent style={{ padding: '32px' }}>\n                    <h2>Welcome to the Basethereum Project</h2>\n                    <p>An algorithmic stablecoin on Base EVM Mainnet, pegged to the price of 1 ETH</p>\n                    <p>BETH utilizes multiple algorithms such as <StyledLink href=\"/\">Bonds</StyledLink> as well as seigniorage.</p>\n                    <p>\n                      Stake your BETH-ETH LP in the <StyledLink href=\"/farms\">Farms</StyledLink> to earn Seigniorage Shares.\n                      Then stake your earned SHARE in the <StyledLink href=\"/\">Boardroom</StyledLink> to partake in supply inflation rewards.\n                    </p>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* <Grid item xs={12}>\n          <Card elevation={0} style={{ border: \"1px solid var(--white)\" }}>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <Grid container spacing={2} justify=\"space-between\">\n                <Grid item xs>Text1</Grid>\n                <Grid item xs>Text1</Grid>\n                <Grid item xs>Text1</Grid>\n                <Grid item xs>Text1</Grid>\n                <Grid item xs>Text1</Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid> */}\n\n        {/* TOMB */}\n        <Grid item xs={12} sm={4}>\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>ETH</h2>\n              <Box mt={2} style={{ backgroundColor: \"transparent !important\" }}>\n                <CardIcon style={{ backgroundColor: \"transparent !important\" }}>\n                  <TokenSymbol symbol=\"ETH\" style={{ backgroundColor: \"transparent !important\" }} />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>${ftmPrice ? ftmPrice : '-.----'} USD</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                {/* Market Cap: ${ftmMarketCap} <br /> */}\n                <br />\n                Price Change 24h: {ftmPriceChange.toFixed(2)}% <br />\n                <br />\n                <br />\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TOMB */}\n        <Grid item xs={12} sm={4}>\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>BETH</h2>\n              <Box mt={2} style={{ backgroundColor: \"transparent !important\" }}>\n                <CardIcon style={{ backgroundColor: \"transparent !important\" }}>\n                  <TokenSymbol symbol=\"BETH\" style={{ backgroundColor: \"transparent !important\" }} />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tombPriceInFTM ? tombPriceInFTM : '-.----'} ETH</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px', alignContent: 'flex-start' }}>\n                  ${tombPriceInDollars ? tombPriceInDollars : '-.--'}\n                </span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tombCirculatingSupply * tombPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tombCirculatingSupply} <br />\n                Total Supply: {tombTotalSupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* TSHARE */}\n        <Grid item xs={12} sm={4}>\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>SHARE</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"MUSH\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{SHAREPriceETH ? SHAREPriceETH : '-.----'} ETH</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${SHAREPrice ? SHAREPrice : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${SHAREMarketCap} <br />\n                Liquidity: {SHARELiquidity} <br />\n                Total Supply: {SHARESupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/*\n        <Grid item xs={12} sm={3}>\n          <Card style={{ backgroundColor: \"transparent\", boxShadow: \"none\", border: \"1px solid var(--white)\" }}>\n            <CardContent align=\"center\" style={{ position: 'relative' }}>\n              <h2>MUSDT</h2>\n              <Box mt={2}>\n                <CardIcon>\n                  <TokenSymbol symbol=\"MUSDT\" />\n                </CardIcon>\n              </Box>\n              Current Price\n              <Box>\n                <span style={{ fontSize: '30px' }}>{tBondPriceInFTM ? tBondPriceInFTM : '-.----'} fUSDT</span>\n              </Box>\n              <Box>\n                <span style={{ fontSize: '16px' }}>${tBondPriceInDollars ? tBondPriceInDollars : '-.--'}</span>\n              </Box>\n              <span style={{ fontSize: '12px' }}>\n                Market Cap: ${(tBondCirculatingSupply * tBondPriceInDollars).toFixed(2)} <br />\n                Circulating Supply: {tBondCirculatingSupply} <br />\n                Total Supply: {tBondTotalSupply}\n              </span>\n            </CardContent>\n          </Card>\n        </Grid> */}\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","import { useCallback } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useAddPopup } from '../state/application/hooks';\n\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\n  const addTransaction = useTransactionAdder();\n  const addPopup = useAddPopup();\n\n  return useCallback(\n    (promise: Promise<TransactionResponse>, summary: string) => {\n      promise\n        .then((tx) => addTransaction(tx, { summary }))\n        .catch((err) => {\n          if (err.message.includes('User denied')) {\n            // User denied transaction signature on MetaMask.\n            return;\n          }\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\n          console.error(`${message}: ${err.message || err.stack}`);\n          addPopup({ error: { message, stack: err.message || err.stack } });\n        });\n    },\n    [addPopup, addTransaction],\n  );\n}\n\nexport default useHandleTransactionReceipt;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface CardIconProps {\n  children?: React.ReactNode;\n}\n\nconst CardIcon: React.FC<CardIconProps> = ({ children }) => <StyledCardIcon>{children}</StyledCardIcon>;\n\nconst StyledCardIcon = styled.div`\n  background-color: none;\n  font-size: 36px;\n  height: 95px;\n  width: 95px;\n  border-radius: 40px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  box-shadow: none !important;\n  margin: 0 auto ${(props) => props.theme.spacing[3]}px;\n`;\n\nexport default CardIcon;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useTombStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { fastRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchTombPrice(){\n      try {\n        setStat(await tombFinance.getTombStat());\n      }\n      catch(err){\n        console.error(err)\n      }\n    }\n    fetchTombPrice();\n  }, [setStat, tombFinance, fastRefresh]);\n\n  return stat;\n};\n\nexport default useTombStats;\n","import { useEffect, useState } from \"react\"\nimport Web3 from \"web3\"\nimport { web3ProviderFrom } from \"../tomb-finance/ether-utils\"\nimport { getBalance } from \"../utils/formatBalance\"\nimport axios from 'axios'\n\nconst web3 = new Web3(\"https://rpcapi.fantom.network/\")\n\nconst ERC20ABI = [{ \"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_spender\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_from\", \"type\": \"address\" }, { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint8\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_to\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"_owner\", \"type\": \"address\" }, { \"name\": \"_spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"fallback\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" } ]\nconst treasuryAddress = \"0x8f555E00ea0FAc871b3Aa70C015915dB094E7f88\"\n\n// const assetList = [\n//     \"0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca\", // 2shares\n//     \"0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52\", // 2shares/FTM LP\n//     \"0x83A52eff2E9D112E9B022399A9fD22a9DB7d33Ae\", // 3omb/wftm\n//     \"0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7\", // 3shares\n//     \"0xd352daC95a91AfeFb112DBBB3463ccfA5EC15b65\", // 3shares/wftm\n// ]\n\n// const contracts = assetList.map(asset => new web3.eth.Contract(ERC20ABI, asset))\n\n// function useTotalTreasuryBalance() {\n//     const [ prices, setPrices ] = useState(assetList.map(asset => {\n//         return { token: asset, value: 0 }\n//     }))\n//     useEffect(() => {\n//         getPrices()\n//     }, [])\n\n//     async function getPrices() {\n//         for (const token of contracts) {\n//             console.log(token)\n//         }\n//     }\n\n//     return prices\n// }\n\nfunction useTotalTreasuryBalance() {\n    const ThreeShares = new web3.eth.Contract(ERC20ABI, '0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7')\n    const WFTM = new web3.eth.Contract(ERC20ABI, '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83')\n    const [balance, setBalance] = useState(0)\n    const [balance_2shares_wftm, setBalance_2shares_wftm] = useState(0)\n    const [balance_3omb_wftm, setBalance_3omb_wftm] = useState(0)\n    const [balance_3shares_wftm, setBalance_3shares_wftm] = useState(0)\n    const [balance_3omb, setBalance_3omb] = useState(0)\n    const [balance_3shares, setBalance_3shares] = useState(0)\n    const [balance_2shares, setBalance_2shares] = useState(0)\n\n    useEffect(() => {\n        getBalance()\n        const interval = setInterval(() => {\n            getBalance()\n        }, 30000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n\n    return { balance, balance_2shares_wftm, balance_3omb_wftm, balance_3shares_wftm, balance_3omb, balance_3shares, balance_2shares }\n\n    async function getBalance() {\n        // const { data2omb } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=2omb-fi')\n        // const { data2shares } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=2share')\n        // const { data3omb } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=30mb-token')\n        \n        const { data } = await axios('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=3shares')\n        const threeSharesBalance = web3.utils.fromWei(await ThreeShares.methods.balanceOf(treasuryAddress).call())\n        const value3shares = threeSharesBalance * data[0].current_price\n\n        // const data2sharesAnd3omb = await axios('https://openapi.debank.com/v1/user/chain_balance?id=0x8f555E00ea0FAc871b3Aa70C015915dB094E7f88&chain_id=ftm')\n\n\n        console.log(`3Shares USD: $${value3shares}`)\n        console.log(`2Shares + 3omb: $${0}`)\n        const LP_2shares_wftm = await getLPPrice('0x6398ACBBAB2561553a9e458Ab67dCFbD58944e52', '0xc54a1684fd1bef1f077a336e6be4bd9a3096a6ca')\n        const LP_3omb_wftm = await getLPPrice('0x83A52eff2E9D112E9B022399A9fD22a9DB7d33Ae', '0x14def7584a6c52f470ca4f4b9671056b22f4ffde')\n        const LP_3shares_wftm = await getLPPrice('0xd352daC95a91AfeFb112DBBB3463ccfA5EC15b65', '0x6437adac543583c4b31bf0323a0870430f5cc2e7')\n        setBalance(0 + value3shares + LP_2shares_wftm + LP_3omb_wftm + LP_3shares_wftm)\n        setBalance_2shares_wftm(LP_2shares_wftm)\n        setBalance_3omb_wftm(LP_3omb_wftm)\n        setBalance_3shares_wftm(LP_3shares_wftm)\n        setBalance_3omb(await get3ombBalance())\n        setBalance_3shares(await get3sharesBalance())\n        setBalance_2shares(await get2sharesBalance())\n    }\n\n    async function get3ombBalance() {\n        const token3omb = new web3.eth.Contract(ERC20ABI, '0x14DEf7584A6c52f470Ca4F4b9671056b22f4FfDE')\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0x14DEf7584A6c52f470Ca4F4b9671056b22f4FfDE&sellAmount=100000000000000000`)\n        const usdValue = Number(web3.utils.fromWei(await token3omb.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\n\n        return usdValue\n    }\n\n    async function get3sharesBalance() {\n        const token3shares = new web3.eth.Contract(ERC20ABI, '0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7')\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0x6437ADAC543583C4b31Bf0323A0870430F5CC2e7&sellAmount=100000000000000000`)\n        const usdValue = Number(web3.utils.fromWei(await token3shares.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\n\n        return usdValue\n    }\n\n    async function get2sharesBalance() {\n        const token2shares = new web3.eth.Contract(ERC20ABI, '0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca')\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca&sellAmount=100000000000000000`)\n        const usdValue = Number(web3.utils.fromWei(await token2shares.methods.balanceOf(treasuryAddress).call())) * Number(data.price)\n\n        return usdValue\n    }\n\n    async function getLPPrice(LPAddress, tokenAddress) {\n        const token = new web3.eth.Contract(ERC20ABI, tokenAddress)\n        const LPtoken = new web3.eth.Contract(ERC20ABI, LPAddress)\n        const { data } = await axios('https://api.binance.com/api/v1/ticker/price?symbol=FTMUSDT')\n        const wftmValue = Number(web3.utils.fromWei(await WFTM.methods.balanceOf(LPAddress).call())) * Number(data.price)\n\n        const tokenValue = Number(await getTokenPrice(tokenAddress)) * Number(web3.utils.fromWei(await token.methods.balanceOf(LPAddress).call()))\n\n        const OneTokenValue = (wftmValue + tokenValue) / Number(web3.utils.fromWei(await LPtoken.methods.totalSupply().call()))\n\n        const total = OneTokenValue * Number(web3.utils.fromWei(await LPtoken.methods.balanceOf(treasuryAddress).call()))\n\n        console.log(wftmValue)\n        console.log(tokenValue)\n        console.log(OneTokenValue)\n        console.log(total)\n\n        return total\n    }\n\n    async function getTokenPrice(tokenAddress) {\n        const { data } = await axios(`https://fantom.api.0x.org/swap/v1/quote?buyToken=USDC&sellToken=${tokenAddress}&sellAmount=100000000000000000`)\n        return data.price\n    }\n}\n\nexport default useTotalTreasuryBalance","import { useCallback } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { Bank } from '../tomb-finance';\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\n\nconst useZap = (bank: Bank) => {\n  const tombFinance = useTombFinance();\n  const handleTransactionReceipt = useHandleTransactionReceipt();\n\n  const handleZap = useCallback(\n    (zappingToken: string, tokenName: string, amount: string) => {\n      handleTransactionReceipt(\n        tombFinance.zapIn(zappingToken, tokenName, amount),\n        `Zap ${amount} in ${bank.depositTokenName}.`,\n      );\n    },\n    [bank, tombFinance, handleTransactionReceipt],\n  );\n  return { onZap: handleZap };\n};\n\nexport default useZap;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useBondStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchBondPrice() {\n      try {\n        setStat(await tombFinance.getBondStat());\n      }\n      catch(err){\n        console.error(err);\n      }\n    }\n    fetchBondPrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useBondStats;\n","import { useEffect, useState } from 'react';\nimport useTombFinance from './useTombFinance';\nimport { TokenStat } from '../tomb-finance/types';\nimport useRefresh from './useRefresh';\n\nconst useShareStats = () => {\n  const [stat, setStat] = useState<TokenStat>();\n  const { slowRefresh } = useRefresh();\n  const tombFinance = useTombFinance();\n\n  useEffect(() => {\n    async function fetchSharePrice() {\n      try {\n        setStat(await tombFinance.getShareStat());\n      } catch(err){\n        console.error(err)\n      }\n    }\n    fetchSharePrice();\n  }, [setStat, tombFinance, slowRefresh]);\n\n  return stat;\n};\n\nexport default useShareStats;\n"],"sourceRoot":""}