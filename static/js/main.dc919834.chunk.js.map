{"version":3,"sources":["state/application/hooks.ts","tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","hooks/useETHPrice.ts","tomb-finance/ERC20.ts","hooks/useBALDPrice.js","hooks/useBETHPrice.js","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useSHAREPrice.js","hooks/useTombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","utils/formatBalance.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","config.ts","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","state/transactions/actions.ts"],"names":["useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","useETHPricef","a","axios","data","price","usd","priceChange","h24Change","useFantomPrice","useState","setPrice","setPriceChange","useEffect","getPrice","interval","setInterval","clearInterval","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","useBALDPricef","pairs","priceUsd","useBALDPrice","web3","SHARE","eth","ERC20ABI","useBETHPricef","priceETH","priceNative","liquidity","methods","call","formattedSupply","utils","fromWei","BETHPriceETH","BETHPrice","SHAREMarketCap","SHARELiquidity","SHARESupply","useSHAREPrice","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWFTM_LP","TOMB","TSHARE","TBOND","FTM","deployments","entries","deployment","abi","tomb","tShare","tBond","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","TombGenesisRewardPool","tombRewardPoolSupply","tombCirculatingSupply","sub","priceInFTM","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","toString","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","ShareRewardPool","useSHAREPricef","SHAREPriceETH","tShareCirculatingSupply","priceOfSharesInDollars","SeigniorageOracle","twap","parseEther","expectedPrice","getTombUpdatedPrice","getBurnableTombLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","tombPerSecond","rewardPerSecond","div","tSharePerSecond","tokenName","token","ethPrice","tokenPrice","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","isFake","getFullDisplayBalance","tokenSupply","getTombStatFake","getShareStatFake","priceOfToken","tokenInLP","bethPrice","SHAREPrice","poolName","poolId","pendingTOMB","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Masonry","tokenContract","ready","WETH","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","WFTM","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","getWFTMPriceFromPancakeswap","priceOfOneFtmInDollars","priceOfShiba","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","latestSnapshotIndex","masonryHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","Date","toNumber","prevAllocation","now","to","currentEpoch","masons","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","length","lpName","zapper","FTM_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","TOMB_TICKER","estimateZapInToken","zapIn","zapInToken","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","setTombFinance","unlockWallet","Provider","setPriceETH","setMarketCap","setLiquidity","setSupply","useTombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","prev","configurations","production","networkName","ftmscanUrl","require","BETH","BOND","BALD","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","BethEthGenesisPool","sectionInUI","multiplier","site","buyLink","closedForStaking","ShareEthGenesisPool","EthGenesisPool","BaldGenesisPool","BethEthRewardPool","ShareEthRewardPool","EthRewardPool","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","getTime","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","grey","100","200","300","400","500","600","700","800","900","theme","borderRadius","color","black","purple","primary","light","main","secondary","white","teal","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createMuiTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","components","MuiButton","variants","props","variant","style","border","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","Home","lazy","Farms","Boardroom","Rebates","Bonds","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","TSHARE_TICKER","ZAPPER_ROUTER_ADDR"],"mappings":"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","file":"static/js/main.dc919834.chunk.js","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../index';\nimport { useWallet } from 'use-wallet';\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }));\n    },\n    [dispatch],\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }));\n    },\n    [dispatch],\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n","import { Deployments } from './deployments';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport type Configuration = {\n  chainId: ChainId;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: { [contractName: string]: [string, number] };\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  masonryLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 1,\n  defaultGas: '6000000',\n  defaultGasPrice: '1000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","import Web3 from 'web3';\nimport { defaultEthereumConfig, EthereumConfig } from './config';\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\nimport { BigNumber } from 'ethers';\n\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\n\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\n\n  return new providerClass(endpoint, {\n    timeout: ethConfig.ethereumNodeTimeout,\n  });\n}\n\nexport function balanceToDecimal(s: string): string {\n  return formatUnits(s);\n}\n\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\n  return parseUnits(String(d), decimals);\n}\n","import { ethers } from 'ethers';\nimport config from '../config';\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\n\nlet provider: ethers.providers.Web3Provider = null;\n\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\n  if (!provider) {\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\n  }\n\n  return provider;\n}","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nconst useFantomPrice = () => {\n    const [price, setPrice] = useState(0);\n    // const [marketCap, setMarketCap] = useState(0);\n    const [priceChange, setPriceChange] = useState(0);\n\n    useEffect(() => {\n        getPrice()\n        const interval = setInterval(() => {\n            getPrice()\n        }, 10000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n    return { price, priceChange };\n    \n    async function getPrice() {\n        const { data } = await axios('https://ultrasound.money/api/v2/fees/eth-price-stats');\n        setPrice(data.usd);\n        setPriceChange(data.h24Change);\n    }\n}\n\nasync function useETHPricef() {\n    const { data } = await axios('https://ultrasound.money/api/v2/fees/eth-price-stats');\n    return { price: data.usd, priceChange: data.h24Change }\n}\n\nexport {useETHPricef}\nexport default useFantomPrice;","import { BigNumber, Contract } from 'ethers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { formatUnits } from 'ethers/lib/utils';\n\nclass ERC20 {\n  private contract: Contract;\n\n  address: string;\n  symbol: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transferFrom(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nconst ABI = [\n  {\n    inputs: [\n      { internalType: 'string', name: 'name', type: 'string' },\n      {\n        internalType: 'string',\n        name: 'symbol',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'addedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'increaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'subtractedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'decreaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nconst useBALDPrice = () => {\n    const [price, setPrice] = useState(0);\n\n    useEffect(() => {\n        getPrice()\n        const interval = setInterval(() => {\n            getPrice()\n        }, 10000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n    return { price };\n    \n    async function getPrice() {\n        try {\n            const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0xE96df8F5ef1A8790415068c798765b07D57643bd');\n            setPrice(data?.pairs?.priceUsd || 0.05);\n        } catch {\n            setPrice(0.05)\n        }\n    }\n}\n\nasync function useBALDPricef() {\n    try {\n        const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0xE96df8F5ef1A8790415068c798765b07D57643bd');\n        return data?.pairs?.priceUsd || 0.05\n    } catch {\n        return 0.05\n    }\n}\n\nexport {useBALDPricef};\nexport default useBALDPrice;","import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport ERC20ABI from '../tomb-finance/ERC20.abi.json'\n\nconst web3 = new Web3('https://developer-access-mainnet.base.org')\n\nconst SHARE = new web3.eth.Contract(ERC20ABI, \"0x3FF13895C5449591e3296192649169c9110941F0\")\n\nconst useSHAREPrice = () => {\n    const [SHAREPriceETH, setPriceETH] = useState(0)\n    const [SHAREPrice, setPrice] = useState(0)\n    const [SHAREMarketCap, setMarketCap] = useState(0)\n    const [SHARELiquidity, setLiquidity] = useState(0)\n    const [SHARESupply, setSupply] = useState(0)\n    \n\n    useEffect(() => {\n        getPrice()\n        const interval = setInterval(() => {\n            getPrice()\n        }, 10000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n    return { BETHPriceETH: SHAREPriceETH, BETHPrice: SHAREPrice, SHAREMarketCap, SHARELiquidity, SHARESupply };\n    \n    async function getPrice() {\n        const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0x0a1d560fD03B546273b776144cA16F4AdBfcdB16')\n        const price = data.pairs[0].priceUsd\n        const priceETH = data.pairs[0].priceNative\n        const liquidity = data.pairs[0].liquidity.usd\n        const supply = await SHARE.methods.totalSupply().call()\n        const formattedSupply = Number(web3.utils.fromWei(supply)).toFixed(2)\n        setPriceETH(priceETH)\n        setPrice(price)\n        setMarketCap(Number(formattedSupply * price).toFixed(2))\n        setLiquidity(liquidity)\n        setSupply(formattedSupply)\n    }\n}\n\nasync function useBETHPricef() {\n    const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0x0a1d560fD03B546273b776144cA16F4AdBfcdB16')\n    const price = data.pairs[0].priceUsd\n    const priceETH = data.pairs[0].priceNative\n    const liquidity = data.pairs[0].liquidity.usd\n    const supply = await SHARE.methods.totalSupply().call()\n    const formattedSupply = Number(web3.utils.fromWei(supply)).toFixed(2)\n\n    return { BETHPriceETH: priceETH, BETHPrice: price, SHAREMarketCap: Number(formattedSupply * price).toFixed(2), SHARELiquidity: liquidity, SHARESupply: formattedSupply };\n}\n\nexport {useBETHPricef}\nexport default useSHAREPrice;","// import { Fetcher, Route, Token } from '@uniswap/sdk';\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\nimport { Configuration } from './config';\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\n\nimport { useBALDPricef } from \"../hooks/useBALDPrice\"\nimport { useSHAREPricef } from \"../hooks/useSHAREPrice\"\nimport { useBETHPricef } from \"../hooks/useBETHPrice\"\nimport { useETHPricef } from \"../hooks/useETHPrice\"\n/**\n * An API module of 2omb Finance contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class TombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  masonryVersionOfUser?: string;\n\n  TOMBWFTM_LP: Contract;\n  TOMB: ERC20;\n  TSHARE: ERC20;\n  TBOND: ERC20;\n  FTM: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.TOMB = new ERC20(deployments.tomb.address, provider, 'BETH');\n    this.TSHARE = new ERC20(deployments.tShare.address, provider, 'SHARE');\n    this.TBOND = new ERC20(deployments.tBond.address, provider, 'BOND');\n    this.FTM = this.externalTokens['WETH'];\n\n    // Uniswap V2 Pair\n    this.TOMBWFTM_LP = new Contract(externalTokens['BETH-ETH LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.TOMB, this.TSHARE, this.TBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchMasonryVersionOfUser()\n      .then((version) => (this.masonryVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\n        this.masonryVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM SPOOKY TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getTombStat(): Promise<TokenStat> {\n    const { TombGenesisRewardPool } = this.contracts;\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(TombGenesisRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply)\n    const { BETHPriceETH: priceInFTM } = await useBETHPricef();\n    console.log(\"price in ftm:\", priceInFTM)\n    const { price: priceOfOneFTM } = await useETHPricef();\n    console.log(\"eth price:\", priceOfOneFTM)\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM.toString(),\n      priceInDollars: priceOfTombInDollars,\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    console.log(name)\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BETH') ? this.TOMB : this.TSHARE;\n    const isTomb = name.startsWith('BETH');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb, false);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Use this method to get price for Tomb\n   * @returns TokenStat for TBOND\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const tombStat = await this.getTombStat();\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\n    const supply = await this.TBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInFTM,\n      priceInDollars: priceOfTBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for TSHARE\n   * priceInFTM\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { ShareRewardPool } = this.contracts;\n\n    const supply = await this.TSHARE.totalSupply();\n\n    const { SHAREPriceETH: priceInFTM } = await useSHAREPricef()\n    const tombRewardPoolSupply = await this.TSHARE.balanceOf( ShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    const { price: priceOfOneFTM } = await useETHPricef();\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInFTM.toString(),\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.TSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.TSHARE.decimal, 0),\n    };\n  }\n\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { SeigniorageOracle, ShareRewardPool } = this.contracts;\n    const expectedPrice = await SeigniorageOracle.twap(this.TOMB.address, ethers.utils.parseEther('1'));\n\n    const supply = await this.TOMB.totalSupply();\n    const tombRewardPoolSupply = await this.TOMB.balanceOf(ShareRewardPool.address);\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.TOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.TOMB.decimal, 0),\n    };\n  }\n\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getTombUpdatedPrice();\n  }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBurnableTombLeft();\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const depositToken = bank.depositToken;\n    const poolContract = this.contracts[bank.contract];\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\n    console.log(\"deposit token price:\", depositTokenPrice)\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BETH' ? await this.getTombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'BETH') {\n      if (contractName !== \"ShareRewardPool\") {\n        const rewardPerSecond = await poolContract.tombPerSecond();\n        if (depositTokenName === 'BETH-ETH LP') {\n          return rewardPerSecond.mul(6000).div(8800).div(24).mul(20);\n        } else if (depositTokenName === 'SHARE-ETH LP') {\n          return rewardPerSecond.mul(2000).div(8800).div(24).mul(20);\n        } else if (depositTokenName === 'ETH') {\n          return rewardPerSecond.mul(400).div(8800).div(24).mul(20);\n        } else if (depositTokenName === 'BALD') {\n          return rewardPerSecond.mul(400).div(8800).div(24).mul(20);\n        }\n        return rewardPerSecond.div(24);\n      }\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('BETH-ETH')) {\n      return rewardPerSecond.mul(6000).div(12600);\n    } else if (depositTokenName.startsWith('SHARE-ETH')) {\n      return rewardPerSecond.mul(6000).div(12600);\n    } else if (depositTokenName.startsWith('ETH')) {\n      return rewardPerSecond.mul(600).div(12600);\n    } else {\n      return rewardPerSecond.mul(6000).div(12600);\n    }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const ethPrice = await useETHPricef();\n    if (tokenName === 'WETH' || tokenName === \"ETH\") {\n      tokenPrice = ethPrice.price.toString();\n    } else {\n      console.log(\"token name:\", tokenName)\n      if (tokenName === \"BETH-ETH LP\") {\n        tokenPrice = await this.getLPTokenPrice(token, this.TOMB, true, false);\n        console.log(\"MY TOKEN PRICE:\", tokenPrice)\n      } else if (tokenName === \"SHARE-ETH LP\") {\n        tokenPrice = await this.getLPTokenPrice(token, this.TSHARE, false, false);\n      } else if (tokenName === \"BALD\") {\n        tokenPrice = (await useBALDPricef()).toString();\n      }\n    }\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryTombPrice = await Treasury.getTombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForTomb = await Treasury.getTombPrice();\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(this.currentMasonry().address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n\n    return totalValue + masonryTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\n   * @param isTomb sanity check for usage of tomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean, isFake: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isFake === true ? isTomb === true ? await this.getTombStatFake() : await this.getShareStatFake() : isTomb === true ? await this.getTombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async getTombStatFake() {\n    const bethPrice = (await useBETHPricef()).BETHPrice;\n    return { priceInDollars: bethPrice }\n  }\n\n  async getShareStatFake() {\n    return { priceInDollars: (await useSHAREPricef()).SHAREPrice }\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'BETH') {\n        return await pool.pendingTOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchMasonryVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentMasonry(): Contract {\n    if (!this.masonryVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Masonry;\n  }\n\n  isOldMasonryMember(): boolean {\n    return this.masonryVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n    const { WETH } = this.config.externalTokens;\n\n    const wftm = new Token(chainId, WETH[0], WETH[1]);\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { chainId } = this.config;\n\n    const { WFTM } = this.externalTokens;\n\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n      const liquidityToken = wftmToToken.liquidityToken;\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n      return priceOfShiba.toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WFTM, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\n    }\n  }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getMasonryAPR() {\n    const Masonry = this.currentMasonry();\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\n    const masonrytShareBalanceOf = await this.TSHARE.balanceOf(Masonry.address);\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.TSHARE.decimal)) * Number(TSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Masonry\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\n    const Masonry = this.currentMasonry();\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.TSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\n    // const Masonry = this.currentMasonry();\n    // const mason = await Masonry.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.totalSupply();\n  }\n\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\n    if (this.isOldMasonryMember()) {\n      throw new Error(\"you're using old masonry. please withdraw and deposit the TSHARE again.\");\n    }\n    const Masonry = this.currentMasonry();\n    return await Masonry.stake(decimalToBalance(amount));\n  }\n\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getShareOf(this.myAccount);\n    }\n    return await Masonry.balanceOf(this.myAccount);\n  }\n\n  async getEarningsOnMasonry(): Promise<BigNumber> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.getCashEarningsOf(this.myAccount);\n    }\n    return await Masonry.earned(this.myAccount);\n  }\n\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    if (this.masonryVersionOfUser === 'v1') {\n      return await Masonry.claimDividends();\n    }\n    return await Masonry.claimReward();\n  }\n\n  async exitFromMasonry(): Promise<TransactionResponse> {\n    const Masonry = this.currentMasonry();\n    return await Masonry.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the masonry\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Masonry, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\n    const currentEpoch = await Masonry.epoch();\n    const mason = await Masonry.masons(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnMasonry();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'TOMB') {\n        asset = this.TOMB;\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\n      } else if (assetName === 'TSHARE') {\n        asset = this.TSHARE;\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\n      } else if (assetName === 'TBOND') {\n        asset = this.TBOND;\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideTombFtmLP(ftmAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.TOMBWFTM_LP.getReserves();\n    let quote;\n    if (tokenName === 'TOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\n    var events: any[] = [];\n    masonryFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === FTM_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === FTM_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === TOMB_TICKER ? this.TOMB : this.TSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { TShareSwapper } = this.contracts;\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\n  }\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\n    const { TShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\n    }\n  }\n\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\n    const { TShareSwapper } = this.contracts;\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\n    return {\n      tshareBalance: tshareBalance.toString(),\n      tbondBalance: tbondBalance.toString(),\n      // tombPrice: tombPriceBN.toString(),\n      // tsharePrice: tsharePriceBN.toString(),\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\n    };\n  }\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport TombFinance from '../../tomb-finance';\nimport config from '../../config';\n\nexport interface TombFinanceContext {\n  tombFinance?: TombFinance;\n}\n\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\n\nexport const TombFinanceProvider: React.FC = ({ children }) => {\n  const { ethereum, account } = useWallet();\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\n\n  useEffect(() => {\n    if (!tombFinance) {\n      const tomb = new TombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        tomb.unlockWallet(ethereum, account);\n      }\n      setTombFinance(tomb);\n    } else if (account) {\n      tombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, tombFinance]);\n\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\n};\n","import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport ERC20ABI from '../tomb-finance/ERC20.abi.json'\n\nconst web3 = new Web3('https://developer-access-mainnet.base.org')\nconst SHARE = new web3.eth.Contract(ERC20ABI, \"0x3FF13895C5449591e3296192649169c9110941F0\")\n\nconst useSHAREPrice = () => {\n    const [SHAREPriceETH, setPriceETH] = useState(0)\n    const [SHAREPrice, setPrice] = useState(0)\n    const [SHAREMarketCap, setMarketCap] = useState(0)\n    const [SHARELiquidity, setLiquidity] = useState(0)\n    const [SHARESupply, setSupply] = useState(0)\n    \n\n    useEffect(() => {\n        getPrice()\n        const interval = setInterval(() => {\n            getPrice()\n        }, 10000)\n        return () => {\n            clearInterval(interval);\n        }\n    }, [])\n    return { SHAREPriceETH, SHAREPrice, SHAREMarketCap, SHARELiquidity, SHARESupply };\n    \n    async function getPrice() {\n        const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0x847ae7a90C5D509F9F68e76641f20B70615BAf74')\n        const price = data.pairs[0].priceUsd\n        const priceETH = data.pairs[0].priceNative\n        const liquidity = data.pairs[0].liquidity.usd\n        const supply = await SHARE.methods.totalSupply().call()\n        const formattedSupply = Number(web3.utils.fromWei(supply)).toFixed(2)\n        setPriceETH(priceETH)\n        setPrice(price)\n        setMarketCap(Number(formattedSupply * price).toFixed(2))\n        setLiquidity(liquidity)\n        setSupply(formattedSupply)\n    }\n}\n\nasync function useSHAREPricef() {\n    const { data } = await axios('https://api.dexscreener.com/latest/dex/pairs/base/0x847ae7a90C5D509F9F68e76641f20B70615BAf74')\n    const price = data.pairs[0].priceUsd\n    const priceETH = data.pairs[0].priceNative\n    const liquidity = data.pairs[0].liquidity.usd\n    const supply = await SHARE.methods.totalSupply().call()\n    const formattedSupply = Number(web3.utils.fromWei(supply)).toFixed(2)\n\n    return { SHAREPriceETH: priceETH, SHAREPrice: price, SHAREMarketCap: Number(formattedSupply * price).toFixed(2), SHARELiquidity: liquidity, SHARESupply: formattedSupply };\n}\n\nexport {useSHAREPricef}\nexport default useSHAREPrice;","import { useContext } from 'react';\nimport { Context } from '../contexts/TombFinanceProvider';\n\nconst useTombFinance = () => {\n  const { tombFinance } = useContext(Context);\n  return tombFinance;\n};\n\nexport default useTombFinance;\n","import { createContext } from 'react';\nimport { Bank } from '../../tomb-finance';\n\nexport interface BanksContext {\n  banks: Bank[];\n}\n\nconst context = createContext<BanksContext>({\n  banks: [],\n});\n\nexport default context;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Context from './context';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport { Bank } from '../../tomb-finance';\nimport config, { bankDefinitions } from '../../config';\n\nconst Banks: React.FC = ({ children }) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const tombFinance = useTombFinance();\n  const isUnlocked = tombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!tombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await tombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          tombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'TOMB' ? tombFinance.TOMB : tombFinance.TSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [tombFinance, setBanks]);\n\n  useEffect(() => {\n    if (tombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, tombFinance, fetchPools]);\n\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n","import { BigNumber } from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n","import React, { createContext, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\ninterface ModalsContext {\n  content?: React.ReactNode;\n  isOpen?: boolean;\n  onPresent: (content: React.ReactNode) => void;\n  onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<React.ReactNode>();\n\n  const handlePresent = useCallback(\n    (modalContent: React.ReactNode) => {\n      setContent(modalContent);\n      setIsOpen(true);\n    },\n    [setContent, setIsOpen],\n  );\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n\n  return (\n    <Context.Provider\n      value={{\n        content,\n        isOpen,\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n      }}\n    >\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) &&\n            React.cloneElement(content, {\n              onDismiss: handleDismiss,\n            })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  );\n};\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Modals;\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => { \n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\n","import { Configuration } from './tomb-finance/config';\nimport { BankInfo } from './tomb-finance';\n\nconst configurations: { [env: string]: Configuration } = {\n  production: {\n    chainId: 8453,\n    networkName: 'Base Mainnet',\n    ftmscanUrl: 'https://basescan.org',\n    defaultProvider: 'https://mainnet.base.org',\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WETH: ['0x4200000000000000000000000000000000000006', 18],\n      SHARE: ['0x3FF13895C5449591e3296192649169c9110941F0', 18],\n      'SHARE-ETH LP': ['0x847ae7a90C5D509F9F68e76641f20B70615BAf74', 18],\n      BETH: ['0x3FF13895C5449591e3296192649169c9110941F0', 18],\n      'BETH-ETH LP': ['0x0a1d560fD03B546273b776144cA16F4AdBfcdB16', 18],\n      BOND: ['0x3FF13895C5449591e3296192649169c9110941F0', 18],\n      BALD: ['0x27D2DECb4bFC9C76F0309b8E88dec3a601Fe25a8', 18]\n    },\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n};\n\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding TOMB\n        - 2 = LP asset staking rewarding TSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  BethEthGenesisPool: {\n    name: \"Earn BETH by staking BETH/ETH LP\",\n    poolId: 0,\n    sectionInUI: 0,\n    contract: 'TombGenesisRewardPool',\n    depositTokenName: \"BETH-ETH LP\",\n    earnTokenName: \"BETH\",\n    finished: false,\n    multiplier: \"6000x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n  ShareEthGenesisPool: {\n    name: \"Earn BETH by staking SHARE/ETH LP\",\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'TombGenesisRewardPool',\n    depositTokenName: \"SHARE-ETH LP\",\n    earnTokenName: \"BETH\",\n    finished: false,\n    multiplier: \"2000x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n  EthGenesisPool: {\n    name: \"Earn BETH by staking ETH\",\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'TombGenesisRewardPool',\n    depositTokenName: \"WETH\",\n    earnTokenName: \"BETH\",\n    finished: false,\n    multiplier: \"400x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n  BaldGenesisPool: {\n    name: \"Earn BETH by staking BALD\",\n    poolId: 3,\n    sectionInUI: 0,\n    contract: 'TombGenesisRewardPool',\n    depositTokenName: \"BALD\",\n    earnTokenName: \"BETH\",\n    finished: false,\n    multiplier: \"400x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n\n  BethEthRewardPool: {\n    name: \"Earn SHARE by staking BETH/ETH LP\",\n    poolId: 0,\n    sectionInUI: 0,\n    contract: 'ShareRewardPool',\n    depositTokenName: \"BETH-ETH LP\",\n    earnTokenName: \"SHARE\",\n    finished: false,\n    multiplier: \"1x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n  ShareEthRewardPool: {\n    name: \"Earn SHARE by staking SHARE/ETH LP\",\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'ShareRewardPool',\n    depositTokenName: \"SHARE-ETH LP\",\n    earnTokenName: \"SHARE\",\n    finished: false,\n    multiplier: \"1x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n  EthRewardPool: {\n    name: \"Earn SHARE by staking ETH\",\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'ShareRewardPool',\n    depositTokenName: \"WETH\",\n    earnTokenName: \"SHARE\",\n    finished: false,\n    multiplier: \"1x\",\n    site: \"\",\n    buyLink: \"\",\n    sort: 0,\n    closedForStaking: false,\n  },\n};\n\nexport default configurations['production'];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport type PopupContent = {\n  txn?: {\n    hash: string;\n    success: boolean;\n    summary?: string;\n  };\n  error?: {\n    message: string;\n    stack: string;\n  };\n};\n\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\n","import { useEffect, useState } from 'react';\nimport config from './../config';\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  /**\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n   * And https://docs.metamask.io/guide/ethereum-provider.html\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n   * @returns\n   */\n  const connectToNetwork = async (provider: any) => {\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: `0x${config.chainId.toString(16)}`,\n          chainName: config.networkName,\n          nativeCurrency: {\n            name: 'ETH',\n            symbol: 'ETH',\n            decimals: 18,\n          },\n          rpcUrls: [config.defaultProvider],\n          blockExplorerUrls: [config.ftmscanUrl],\n        },\n      ],\n    });\n  };\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = transactions[chainId] ?? {};\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\n      transactions[chainId] = txs;\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\nimport {\n  addPopup,\n  PopupContent,\n  removePopup,\n  toggleWalletModal,\n  toggleSettingsMenu,\n  updateBlockNumber,\n} from './actions';\n\ntype PopupList = Array<{\n  key: string;\n  show: boolean;\n  content: PopupContent;\n  removeAfterMs: number | null;\n}>;\n\nexport interface ApplicationState {\n  blockNumber: { [chainId: number]: number };\n  popupList: PopupList;\n  walletModalOpen: boolean;\n  settingsMenuOpen: boolean;\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export const white = '#FFF';\nexport const black = '#000';\n\nexport const green = {\n  500: '#00D110',\n};\n\nexport const purple = {\n  200: '#bd7cfe',\n  400: '#ab47bc',\n  700: '#7b1fa2',\n};\n\nexport const red = {\n  100: '#C1C1FF',\n  200: '#7575FF',\n  500: '#9090FF',\n};\n\nexport const grey = {\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n};\n\nexport const bg = '#000000';\n\nexport const teal = {\n  200: '#64ffda',\n};\n","import { black, purple, teal, grey, red, white } from './colors';\n\nconst theme = {\n  borderRadius: 12,\n  color: {\n    black,\n    grey,\n    purple,\n    primary: {\n      light: red[200],\n      main: red[500],\n    },\n    secondary: {\n      main: grey[400],\n    },\n    white,\n    teal,\n  },\n  siteWidth: 1200,\n  spacing: {\n    1: 4,\n    2: 8,\n    3: 16,\n    4: 24,\n    5: 32,\n    6: 48,\n    7: 64,\n  },\n  topBarSize: 72,\n};\n\nexport default theme;\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst newTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    text: {\n      primary: '#E6E9EE',\n    },\n    background: {\n      default: 'transparent',\n      paper: 'transparent',\n    },\n    primary: {\n      light: '#757CE8',\n      main: '#571EB1',\n      dark: '#571EB1',\n      contrastText: '#16191E',\n    },\n    secondary: {\n      light: '#757CE8',\n      main: '#757CE8',\n      dark: '#757CE8',\n      contrastText: '#000',\n    },\n    action: {\n      disabledBackground: '#9f9d9d !important',\n      active: '#000',\n      hover: '#000',\n    },\n  },\n  typography: {\n    color: '#E6E9EE',\n    fontFamily: ['\"Silkscreen\"', 'sans-serif'].join(','),\n  },\n  components: {\n      MuiButton: {\n          variants: [\n              {\n                  props: { variant: \"standard\" },\n                  style: {\n                      border: \"1px solid var(--white)\"\n                  }\n              }\n          ]\n      }\n  }\n});\n\nexport default newTheme;\n","import { useCallback, useEffect, useState } from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport default function Updater(): null {\n  const { ethereum, chainId } = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({ chainId, blockNumber: null });\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import { useEffect, useState } from 'react';\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useWallet } from 'use-wallet';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { AppDispatch, AppState } from '../index';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { getDefaultProvider } from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const { chainId, ethereum } = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater />\n    <TransactionUpdater />\n  </>\n);\n\nexport default Updaters;\n","import Loader from './Loader';\n\nexport default Loader;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography>Loading</Typography>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useContext } from 'react';\nimport { AlertCircle, CheckCircle } from 'react-feather';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useWallet } from 'use-wallet';\nimport config from '../../config';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function TransactionPopup({\n  hash,\n  success,\n  summary,\n}: {\n  hash: string;\n  success?: boolean;\n  summary?: string;\n}) {\n  const { chainId } = useWallet();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\n      </div>\n      <div>\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\n        {chainId && (\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\n            &nbsp;View on Basescan\n          </StyledLink>\n        )}\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback } from 'react';\nimport { AlertCircle } from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div style={{ paddingRight: 16 }}>\n        <AlertCircle color=\"#FF6871\" size={24} />\n      </div>\n      <div>\n        <StyledPopupDesc>{message}</StyledPopupDesc>\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\n          Copy error details\n        </StyledLink>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { X } from 'react-feather';\nimport { useSpring } from 'react-spring/web';\nimport styled, { ThemeContext } from 'styled-components';\nimport { animated } from 'react-spring';\nimport { PopupContent } from '../../state/application/actions';\nimport { useRemovePopup } from '../../state/application/hooks';\nimport TransactionPopup from './TransactionPopup';\nimport ErrorPopup from './ErrorPopup';\n\nexport const StyledClose = styled(X)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Popup = styled.div`\n  display: inline-block;\n  width: 100%;\n  padding: 1em;\n  background-color: ${({ theme }) => theme.color.grey[700]};\n  position: relative;\n  border-radius: 10px;\n  padding: 20px;\n  padding-right: 35px;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    min-width: 290px;\n  }\n`;\nconst Fader = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 2px;\n  background-color: ${({ theme }) => theme.color.grey[400]};\n`;\n\nconst AnimatedFader = animated(Fader);\n\nexport default function PopupItem({\n  removeAfterMs,\n  content,\n  popKey,\n}: {\n  removeAfterMs: number | null;\n  content: PopupContent;\n  popKey: string;\n}) {\n  const removePopup = useRemovePopup();\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\n  useEffect(() => {\n    if (removeAfterMs === null) return undefined;\n\n    const timeout = setTimeout(() => {\n      removeThisPopup();\n    }, removeAfterMs);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [removeAfterMs, removeThisPopup]);\n\n  const theme = useContext(ThemeContext);\n\n  let popupContent;\n  if ('txn' in content) {\n    const {\n      txn: { hash, success, summary },\n    } = content;\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\n  }\n  if ('error' in content) {\n    const {\n      error: { message, stack },\n    } = content;\n    popupContent = <ErrorPopup message={message} stack={stack} />;\n  }\n\n  const faderStyle = useSpring({\n    from: { width: '100%' },\n    to: { width: '0%' },\n    config: { duration: removeAfterMs ?? undefined },\n  });\n\n  return (\n    <Popup>\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\n      {popupContent}\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\n    </Popup>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useActivePopups } from '../../state/application/hooks';\nimport PopupItem from './PopupItem';\n\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\n  position: relative;\n  max-width: 100%;\n  height: ${({ height }) => height};\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\n\n  display: none;\n  @media (max-width: 768px) {\n    display: block;\n  };\n`;\n\nconst MobilePopupInner = styled.div`\n  height: 99%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  display: flex;\n  flex-direction: row;\n  -webkit-overflow-scrolling: touch;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FixedPopupColumn = styled.div`\n  position: fixed;\n  top: 64px;\n  margin-right: 24px;\n  right: 3rem;\n  max-width: 355px !important;\n  width: 100%;\n  z-index: 2;\n\n  @media (max-width: 768px) {\n    display: none;\n  } ;\n`;\n\nexport default function Popups() {\n  // get all popups\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      <FixedPopupColumn>\n        {activePopups.map((item) => (\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n        ))}\n      </FixedPopupColumn>\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\n        <MobilePopupInner>\n          {activePopups // reverse so new items up front\n            .slice(0)\n            .reverse()\n            .map((item) => (\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n            ))}\n        </MobilePopupInner>\n      </MobilePopupWrapper>\n    </>\n  );\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\nimport { ThemeProvider as TP1 } from 'styled-components';\nimport { UseWalletProvider } from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport store from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport Regulations from './views/Regulations/Regulations';\nimport { RefreshContextProvider } from './contexts/RefreshContext';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Farms = lazy(() => import('./views/Cemetery'));\nconst Boardroom = lazy(() => import('./views/Masonry'));\nconst Rebates = lazy(() => import('./views/Rebates'));\nconst Bonds = lazy(() => import('./views/Pit'));\nconst Treasury = lazy(() => import('./views/Treasury'));\n// const SBS = lazy(() => import('./views/Sbs'));\n// const Liquidity = lazy(() => import('./views/Liquidity'));\n\nconst NoMatch = () => (\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/boardroom\">\n              <Boardroom />\n            </Route>\n            <Route path=\"/rebates\">\n              <Rebates />\n            </Route>\n            <Route path=\"/bonds\">\n              <Bonds />\n            </Route>\n            <Route path=\"/treasury\">\n              <Treasury />\n            </Route>\n            {/* <Route path=\"/sbs\">\n              <SBS />\n            </Route>\n            <Route path=\"/regulations\">\n              <Regulations />\n            </Route>\n            <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route> */}\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProvider\n          chainId={config.chainId}\n          connectors={{\n            walletconnect: { rpcUrl: config.defaultProvider },\n            walletlink: {\n              url: config.defaultProvider,\n              appName: 'Basethereum',\n              appLogoUrl: 'https://github.com/tombfinance/tombfinance-assets/blob/master/logo_tomb_NoBG.png',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <TombFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </TombFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProvider>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const TOMB_TICKER = 'BETH';\nexport const TSHARE_TICKER = 'SHARE';\nexport const TBOND_TICKER = 'BOND';\nexport const FTM_TICKER = 'ETH';\nexport const WFTM_TICKER = 'WETH';\nexport const SPOOKY_ROUTER_ADDR = '0xfCD3842f85ed87ba2889b4D35893403796e67FF1';\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\nexport const TAX_OFFICE_ADDR = '0xcaf6C0FB8Bcb737C2D5D7e5Db615147a26091De1';\n","import { createAction } from '@reduxjs/toolkit';\n// import { ChainId } from '@uniswap/sdk';\nimport { ChainId } from '@spookyswap/sdk';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\n\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n"],"sourceRoot":""}